#+TITLE:AEKOS Test1 
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
-----

* intro
#+begin_src R :session shell :tangle aekos_test1.Rmd :exports none :eval no :padline no
  AEKOS Test 1
  ========================================================
  
  ivan.hanigan@anu.edu.au
  
  ```{r echo=FALSE, eval=F, results='hide'}
  require(knitr)
  require(markdown)
  knit2html('aekos_test1.Rmd', options = c('toc', markdown::markdownHTMLOptions(TRUE)))
  ```
  
  ``` {r echo=FALSE, results='hide'}
  require(xtable)
  ```
  
  ### Introduction
  - This is a report of the first attempt to play with the new Australian Terrestrial Ecosystem Research Network's data portal ['AEKOS'](http://www.aekos.org.au/)
  - I have to admit at the outset I am not that interested in searching for actual data, just interested in how AEKOS exposes the data.
  - This is a Reproducible Research Report, written using  Emacs orgmode to construct a knitr document and creates a HTML output.  I've made the code available on github [here](http://ivanhanigan.github.com/data/aekos_test1.org)
    
  ### Methods
  #### Download from portal  
  - went to the website and tried a few queries until I found something with data, added to cart and proceeded to checkout
  - NB I don't even remember what search criteria I put together to get these data.  The first couple I tried (focused on Drought) did not find any data.  I think this was about some species or other.
  - got an email with link to download the data
  
  ```{r, echo = F, eval = F}
  ---------- message ----------
  From: <download@ecoinformatics.org.au>
  Date: Fri, Jun 6, 2014 at 10:13 AM
  Subject: Your AEKOS extraction has completed
  To: ivan.hanigan@gmail.com
  
  
  Dear Ivan Hanigan,
  
  The data extract from the AEKOS portal called test1, that you initiated on Fri Jun 06 00:13:06 UTC 2014 has been completed on Fri Jun 06 00:13:09 UTC 2014. To download the generated data files please click on the link at the bottom of this message.
  
  Downloading can take some time depending upon the size of your extract and your network capacity.
  
  Instructions on how to process your downloaded data are included in the download zip file as a SetupMySQL.pdf or SetupPostgreSQL.pdf.
  
  If you have any queries or issues with this download then please contact us via our online contact form or through email to enquiry@aekos.org.au
  
  Thank you
  Your AEKOS Download Link
  http://www.portal.aekos.org.au/extraction-data/1400572564201/Data_Fri%20Jun%2006%2000:13:09%20UTC%202014.zip
  
  ```
  
  - downloaded zip to my ~/data/aekos_tests directory
  - unzipped and now have some SQL setup files and some pdfs
  - I can now see that the appropriate citation is 
  
  ```
  State of South Australia (Department of Environment, Water and Natural Resources, South Australia) (2012)
  Dalhousie Survey (Scientific Expedition Group) Survey, South Australian Biological Survey Program, Version 1 /2014. <em>State of South Australia
  (Department of Environment, Water and Natural Resources, South Australia)</em>, Adelaide, South Australia. Obtained via Ã†KOS Data Portal (<a
  href="http://www.portal.aekos.org.au/" target="_blank" >http://www.portal.aekos.org.au/</a>) at TERN Eco-informatics, The University of Adelaide.
  Accessed [<em>dd mmm yyyy</em>, e.g. 01 Apr 2010].
  ```
    
    
    
  #### Load to postgres database
  - I run postgres so I didn't need to install it but it is good that there are instructions here if you do need to.
  - I went straight to the linux step 8 (page 6) "Create the database schema from the downloaded schema"
  
  ```
  psql -U postgres -d aekos -h localhost -p 5432 -f _DatabaseImport-PostgreSQLSchemaUpdater.sql  
  ```
  
  - then on step 10 "Establish the relationships between the tables:
  
  ```
  psql -U postgres -d aekos -h localhost -p 5432 -f relationships_PostgreSQL.sql
  ```
  
  - Now I have a database.... so what do I do now?
#+end_src
* Exploratory Data
** Load R packages


#+begin_src R :session *R* :tangle aekos_test1.Rmd :exports report :eval no
  ### Exploratory Data Analysis
  #### Load R packages
  - Load some useful tools I made for exploring data with R and PostgreSQL  
  
  ``` {r}
  if(!require(swishdbtools)){
    require(devtools)
    install_github("swishdbtools", "swish-climate-impact-assessment")
  } else {
    require(swishdbtools)
  }
  
  if(!require(disentangle)){
    require(devtools)
    install_github("disentangle", "ivanhanigan")
  } else {
    require(disentangle)
  }

  if(!require(gisviz)){
    require(devtools)
    install_github("gisviz", "ivanhanigan")
  } else {
    require(gisviz)
  }
  
  ```
#+end_src

#+RESULTS:
: TRUE

** List Tables

#+name:eda1
#+begin_src R :session *R* :tangle aekos_test1.Rmd :exports report :eval no
  #### List Tables
  - The first thing I usually do is look at the list of tables available
  
  ``` {r, results = 'asis'}
  require(swishdbtools)
  require(xtable)
  ch <- connect2postgres2("aekos_tests")
  lst <- pgListTables(ch, "public")
  nrow(lst)
  # there are a lot.  here is the head
  tbl <- xtable(head(lst))
  print(tbl, type = "html", include.rownames=F)
  ```
#+end_src


** summarise data
#+name:eda
#+begin_src R :session *R* :tangle aekos_test1.Rmd :exports report :eval no
  #### Variable Distributions
  - choose a table and check it out
  
  ```{r, results = 'asis'}
  lst <- pgListTables(ch, "public")
  tbl <- sample(lst[,1], 1)
  print(tbl)
  # First time I tried this I retreived
  # [1] "crownseparationratiovalue"
  # from the _TableDefinitions.pdf I can see this is defined as 
  
  ### "Average distance between the edges of the crowns divided by the average width of the crowns"
  
  # with only two cols, boring, try EXTRACTSPECIESPRESENCE
  tbl  <- tolower("EXTRACTSPECIESPRESENCE")
  dat  <- dbGetQuery(ch,
    sprintf("select *
    from %s
    ", tbl)
    )                   
  # str(dat)
  # what is the code for speciesname? 
  ```
#+end_src

** identify relationships and summarise variables
#+name:identify relationships
#+begin_src R :session *R* :tangle aekos_test1.Rmd :exports none :eval no
  #### Identify the relational tables
  - I was not using the DbVisualizer tool before so I had to install it
  - this lets me easily see which tables are related to this table/variable.names
  - I think pgAdmin > Reports > Dependents report could have been used to figure out what the related tables/variable.names were, but it would have been a bit harder.
  
  ![aekos_species_presence.png](aekos_species_presence.png)
  
  #### Summarise the variable distributions

  ```{r, results = 'asis'}
  # from this I can see I need to get speciesname from speciesconcept
  dat <- dbGetQuery(ch,
  "select *
  from extractspeciespresence tb1
   left join speciesconcept tb2
   on tb1.speciesname = tb2._pk_id"
  )
  # str(dat)
  # dat
  
  dd  <- data_dictionary(dat, show_levels = 6)
  print(xtable(dd), type = 'html', include.rownames=F)
  ```

  - it is weird that the lowerabundance and upperabundance are both zero, must be because these are species presence data 
  - but it would be better for this to be NA

#+end_src

** spatial-code
#+name:spatial
#+begin_src R :session *R* :tangle aekos_test1.Rmd :exports none :eval no
  ### Spatial Data
  - I can also see from the DbVisualizer graph that the spatialpoint table has the x and y coordinates for the location variable
  - I then also had to find the table with the coordinatereferencesystem (crs)
  - The code to make the plot is next and the plot of the spatial data is below.
  
  ```{r, results = 'asis', eval = FALSE}
  #### name:spatial####
  require(swishdbtools)
  require(gisviz)
  require(sqldf)
  ch <- connect2postgres2("aekos_tests")
  lst <- pgListTables(ch, "public")
  #lst 
  tbl <- lst[grep("spatial", lst[,1]),]
  pts  <- dbGetQuery(ch, paste("select * from ", tbl))
  # str(pts)
  # t(pts[1,])
  
  pts <- dbGetQuery(ch,
  "select tb1._pk_id as id, namewithoutauthorship, x, y, tb4.name
   from extractspeciespresence tb1
   join
   speciesconcept tb2
   on tb1.speciesname = tb2._pk_id
   join 
   spatialpoint tb3
   on tb1.location = tb3._pk_id
   join 
   coordinatereferencesystem tb4
   on tb3.crs = tb4._pk_id
  ")
  # str(pts)
  # GDA94
  
  
  epsg <- make_EPSG()
  # names(epsg)
  crs <- epsg[which(epsg$code == 4283),'prj4']
  # there are multiple species per site, so summarise first
  pts <- sqldf("select x, y, count(*)
  from pts
  group by x, y
  ", drv = 'SQLite')
  
  pts <- SpatialPointsDataFrame(pts[,c('x','y')], pts, proj4string = CRS(crs))
  #str(pts)
  writeOGR(pts, "spatialpoint.shp", "spatialpoint", driver= "ESRI Shapefile")
  
  png("plot.png")
  plotMyMap(pts, xl = c(110,155), yl = c(-40,-10))
  title("dalhousie survey")
  dev.off()
  
  ```
  
  ![plot.png](plot.png)
  
  #### Zoom in on the point locations
  - using the number of species names at each location as a count
  
  ![spatialpoint_species_counts.png](spatialpoint_species_counts.png)
  
#+end_src
* Conclusions
*** COMMENT aekos_test1-code
#+name:aekos_test1
#+begin_src R :session *R* :tangle aekos_test1.Rmd :exports none :eval no
### Conclusions

- I really like how this model emphasises the use of databases for data management (and postgres or mysql are great options)
- I think the instructions for the load process are good but with typos makes it difficult
- for a casual browser this is not so much fun

#+end_src
* COMMENT go
#+name:go
#+begin_src R :session *R* :tangle no :exports none :eval yes
  #### name:go####
  
  require(knitr)
  require(markdown)
  knit2html('aekos_test1.Rmd', options = c('toc', markdown::markdownHTMLOptions(TRUE)), stylesheet='custom.css')
 dbDisconnect(ch)
#+end_src

#+RESULTS: go
: TRUE
* COMMENT expose via github
just copy the most mature version to 
*** COMMENT mv-code
#+name:mv
#+begin_src sh :session *shell* :exports none :eval yes
cp aekos_test1.org /home/ivan_hanigan/projects/ivanhanigan.github.com.raw/data/aekos_test1.org
#+end_src

#+RESULTS: mv

* custom.css-code
#+name:custom.css
#+begin_src text :tangle custom.css :exports none :eval no :padline no
body, td {
   font-family: sans-serif;
   background-color: white;
   font-size: 12px;
   margin: 8px;
}

tt, code, pre {
   font-family: 'DejaVu Sans Mono', 'Droid Sans Mono', 'Lucida Console', Consolas, Monaco, monospace;
}

h1 { 
   font-size:2.2em; 
}

h2 { 
   font-size:1.8em; 
}

h3 { 
   font-size:1.4em; 
}

h4 { 
   font-size:1.0em; 
}

h5 { 
   font-size:0.9em; 
}

h6 { 
   font-size:0.8em; 
}

a:visited {
   color: rgb(50%, 0%, 50%);
}

pre {   
   margin-top: 0;
   max-width: 95%;
   border: 1px solid #ccc;
   white-space: pre-wrap;
}

pre code {
   display: block; padding: 0.5em;
}

code.r, code.cpp {
   background-color: #F8F8F8;
}

table {
   max-width: 95%;
   border: 1px solid #ccc;
   width: 1000px;
}
 
th {
  background-color: #000000;
  color: #ffffff;
}
 
td {
  background-color: #dcdcdc;
}

blockquote {
   color:#666666;
   margin:0;
   padding-left: 1em;
   border-left: 0.5em #EEE solid;
}

hr {
   height: 0px;
   border-bottom: none;
   border-top-width: thin;
   border-top-style: dotted;
   border-top-color: #999999;
}

@media print {
   * { 
      background: transparent !important; 
      color: black !important; 
      filter:none !important; 
      -ms-filter: none !important; 
   }

   body { 
      font-size:12pt; 
      max-width:100%; 
   }
       
   a, a:visited { 
      text-decoration: underline; 
   }

   hr { 
      visibility: hidden;
      page-break-before: always;
   }

   pre, blockquote { 
      padding-right: 1em; 
      page-break-inside: avoid; 
   }

   tr, img { 
      page-break-inside: avoid; 
   }

   img { 
      max-width: 100% !important; 
   }

   @page :left { 
      margin: 15mm 20mm 15mm 10mm; 
   }
     
   @page :right { 
      margin: 15mm 10mm 15mm 20mm; 
   }

   p, h2, h3 { 
      orphans: 3; widows: 3; 
   }

   h2, h3 { 
      page-break-after: avoid; 
   }
}

#+end_src
