<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Recology</title>
		<description>An exploration of using R for ecology, evolution, and open science.</description>
		<link>http://schamberlain.github.com</link>
		
			<item>
				<title>notes-on-spatial-stats-meeting-with-sarunya-sujaritpong</title>
				<description>&lt;ul&gt;
&lt;li&gt;Yesterday I met with Sarunya Sujaritpong a PhD student working with &lt;a href=&quot;http://ivanhanigan.github.io/2013/10/spatially-structured-time-series-with-nmmaps/&quot;&gt;spatially structured time-series models as described previously&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Her supervisor Keith Dear has given me a lot of good stats advice in the past and one bit I keep thinking about is that a time series model can be fit for multiple spatial areal units of the same city and residual spatial auto-correlation in the errors should not be too much of a concern&lt;/li&gt;
&lt;li&gt;The problem would be if you get strong spatial autocorrelation of the residuals this indicates that the assumption of independent errors is violated and you will have tighter confidence intervals around the coefficients of interest than is really the case, inflating the signficance estimated for the relative risk&lt;/li&gt;
&lt;li&gt;The beta coefficient itself shouldn't be affected.&lt;/li&gt;
&lt;li&gt;So long as biostatisticians like Keith are comfortable with not addressing this issue in spatially structured time-series that is great but I see people are &lt;a href=&quot;http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0043360&quot;&gt;starting to include this in their models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To date I've mostly seen it done in spatial (cross sectional) data analysis, not spatial times-series&lt;/li&gt;
&lt;li&gt;I'm preparing for the day when I might need to address this for a reviewer and would like to know what to do about it in case that happens&lt;/li&gt;
&lt;li&gt;So I asked Sarunya for a discussion about her research&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Sarunya's model is essentially like this&lt;/h3&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;fit &amp;lt;- glm(deaths ~ pollutant1 + pollutant2 + pollutant ... +
       ns(temp, df) + ns(humidity, df) +
       ns(time, df = 7*numYears) +
       SLA * ns(time, df = 2),
       data = analyte, family = poisson
       )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;SLA is Statistical Local Area (now called SA2, like a suburb)&lt;/li&gt;
&lt;li&gt;Sarunya explained that the research question was if the magnitude of the coeff on pollutant1 differed between this model and the old style of model where an entire city is used as the unit of analysis per day and exposure estimates are calculated as averages across several monitoring stations in the city&lt;/li&gt;
&lt;li&gt;turns out that this comparison is still valid EVEN IF THE STANDARD ERROR IS BIASED DUE TO RESIDUAL SPATIAL AUTOCORRELATION&lt;/li&gt;
&lt;li&gt;therefore this study avoids the issue by it's intentional design to compare betas not se&lt;/li&gt;
&lt;li&gt;Interestingly Sarunya explained that the stats theory suggests that even if the exposure precision is increased (exposure misclassification bias is decreased) the se on the beta will not be affected.&lt;/li&gt;
&lt;li&gt;this is fascinating in itself, but a separate issue for another post&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Conclusions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;So it looks like the extent a study might need to consider the issue of potential residual spatial autocorrelation depends alot on what questions are being asked and what inferences will be attempted from the results&lt;/li&gt;
&lt;li&gt;if the aim of the study is to estimate the magnitude AND CONFIDENCE INTERVALS of an exposure's relative risk (especially some novel exposure such as interstellar space dust across the suburbs) then the issue might become important to address.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;THANKS Sarunya!&lt;/p&gt;
</description>
				<published>Thu Oct 31 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/notes-on-spatial-stats-meeting-with-sarunya-sujaritpong/</link>
			</item>
		
			<item>
				<title>spatial-lag-and-timeseries-model-with-nmmaps</title>
				<description>&lt;ul&gt;
&lt;li&gt;Today I chatted with Phil Kokic at CSIRO Mathematics, Informatics and Statistics about the way the spatially lagged neighbours variable absorbs any residual spatial correlation in the errors&lt;/li&gt;
&lt;li&gt;We agreed that this is a pretty minimal attempt, not as good as a spatial error model but pretty easy to implement&lt;/li&gt;
&lt;li&gt;I've hacked together some very very ugly code to construct the lagged variable&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ivanhanigan.github.io/spatiotemporal-regression-models/#sec-3&quot;&gt;http://ivanhanigan.github.io/spatiotemporal-regression-models/#sec-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There may be errors, it's been a long day, but I won't have a chance to check back on this till next week so I thought I'd put it out there as is.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<published>Mon Oct 28 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/spatial-lag-and-timeseries-model-with-nmmaps/</link>
			</item>
		
			<item>
				<title>extract-weather-data-from-awap-grids</title>
				<description>&lt;h3&gt;extract mean annual temperatures at the BOM website&lt;/h3&gt;

&lt;p&gt;I use BoM data a fair bit and work on a project that tried to streamline access to BoM data for extreme weather event analysis (which require long term average climatology to provide the baseline that extremes are measured against).&lt;/p&gt;

&lt;p&gt;WRT to temperature most daily averages from BoM are calculated as average of maximum_temperature_in_24_hours_after_9am_local_time_in_degrees and minimum_temperature_in_24_hours_before_9am_local_time_in_degree (only couple of hundred AWS provide hourly data to get the proper mean of 24 obs).&lt;/p&gt;

&lt;p&gt;The Bureau of Meteorology has generated a range of gridded meteorological datasets for Australia as a contribution to the Australian Water Availability Project (AWAP). These include daily max and min temperature which you could use to generate daily averages, then calculate your long term averages from those?&lt;/p&gt;

&lt;p&gt;http://www.bom.gov.au/jsp/awap/&lt;/p&gt;

&lt;p&gt;Documentation is at http://www.bom.gov.au/amm/docs/2009/jones.pdf&lt;/p&gt;

&lt;p&gt;I’m working on a workflow to download and process the public BoM weather grids.
It uses the open source R software with some of our custom written packages:&lt;/p&gt;

&lt;!-- &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; --&gt;


&lt;!-- &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; --&gt;


&lt;!--                &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; --&gt;


&lt;!-- &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot; xml:lang=&quot;en&quot;&gt; --&gt;


&lt;!-- &lt;head&gt; --&gt;


&lt;!-- &lt;title&gt;AWAP GRIDS &lt;/title&gt; --&gt;


&lt;!-- &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt; --&gt;


&lt;!-- &lt;meta name=&quot;title&quot; content=&quot;AWAP GRIDS &quot;/&gt; --&gt;


&lt;!-- &lt;meta name=&quot;generator&quot; content=&quot;Org-mode&quot;/&gt; --&gt;


&lt;!-- &lt;meta name=&quot;generated&quot; content=&quot;2013-10-26T22:31+1100&quot;/&gt; --&gt;


&lt;!-- &lt;meta name=&quot;author&quot; content=&quot;Ivan Hanigan&quot;/&gt; --&gt;


&lt;!-- &lt;meta name=&quot;description&quot; content=&quot;&quot;/&gt; --&gt;


&lt;!-- &lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt; --&gt;


&lt;!-- &lt;style type=&quot;text/css&quot;&gt; --&gt;


&lt;!--  &lt;\!--/*-\-&gt;&lt;![CDATA[/*&gt;&lt;\!--*/ --&gt;


&lt;!--   html { font-family: Times, serif; font-size: 12pt; } --&gt;


&lt;!--   .title  { text-align: center; } --&gt;


&lt;!--   .todo   { color: red; } --&gt;


&lt;!--   .done   { color: green; } --&gt;


&lt;!--   .tag    { background-color: #add8e6; font-weight:normal } --&gt;


&lt;!--   .target { } --&gt;


&lt;!--   .timestamp { color: #bebebe; } --&gt;


&lt;!--   .timestamp-kwd { color: #5f9ea0; } --&gt;


&lt;!--   .right  {margin-left:auto; margin-right:0px;  text-align:right;} --&gt;


&lt;!--   .left   {margin-left:0px;  margin-right:auto; text-align:left;} --&gt;


&lt;!--   .center {margin-left:auto; margin-right:auto; text-align:center;} --&gt;


&lt;!--   p.verse { margin-left: 3% } --&gt;


&lt;!--   pre { --&gt;


&lt;!--    border: 1pt solid #AEBDCC; --&gt;


&lt;!--    background-color: #F3F5F7; --&gt;


&lt;!--    padding: 5pt; --&gt;


&lt;!--    font-family: courier, monospace; --&gt;


&lt;!--         font-size: 90%; --&gt;


&lt;!--         overflow:auto; --&gt;


&lt;!--   } --&gt;


&lt;!--   table { border-collapse: collapse; } --&gt;


&lt;!--   td, th { vertical-align: top;  } --&gt;


&lt;!--   th.right  { text-align:center;  } --&gt;


&lt;!--   th.left   { text-align:center;   } --&gt;


&lt;!--   th.center { text-align:center; } --&gt;


&lt;!--   td.right  { text-align:right;  } --&gt;


&lt;!--   td.left   { text-align:left;   } --&gt;


&lt;!--   td.center { text-align:center; } --&gt;


&lt;!--   dt { font-weight: bold; } --&gt;


&lt;!--   div.figure { padding: 0.5em; } --&gt;


&lt;!--   div.figure p { text-align: center; } --&gt;


&lt;!--   div.inlinetask { --&gt;


&lt;!--     padding:10px; --&gt;


&lt;!--     border:2px solid gray; --&gt;


&lt;!--     margin:10px; --&gt;


&lt;!--     background: #ffffcc; --&gt;


&lt;!--   } --&gt;


&lt;!--   textarea { overflow-x: auto; } --&gt;


&lt;!--   .linenr { font-size:smaller } --&gt;


&lt;!--   .code-highlighted {background-color:#ffff00;} --&gt;


&lt;!--   .org-info-js_info-navigation { border-style:none; } --&gt;


&lt;!--   #org-info-js_console-label { font-size:10px; font-weight:bold; --&gt;


&lt;!--                                white-space:nowrap; } --&gt;


&lt;!--   .org-info-js_search-highlight {background-color:#ffff00; color:#000000; --&gt;


&lt;!--                                  font-weight:bold; } --&gt;


&lt;!--   /*]]&gt;*/-\-&gt; --&gt;


&lt;!-- &lt;/style&gt; --&gt;


&lt;!-- &lt;script type=&quot;text/javascript&quot;&gt; --&gt;


&lt;!-- /* --&gt;


&lt;!-- @licstart  The following is the entire license notice for the --&gt;


&lt;!-- JavaScript code in this tag. --&gt;




&lt;!-- Copyright (C) 2012-2013 Free Software Foundation, Inc. --&gt;




&lt;!-- The JavaScript code in this tag is free software: you can --&gt;


&lt;!-- redistribute it and/or modify it under the terms of the GNU --&gt;


&lt;!-- General Public License (GNU GPL) as published by the Free Software --&gt;


&lt;!-- Foundation, either version 3 of the License, or (at your option) --&gt;


&lt;!-- any later version.  The code is distributed WITHOUT ANY WARRANTY; --&gt;


&lt;!-- without even the implied warranty of MERCHANTABILITY or FITNESS --&gt;


&lt;!-- FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details. --&gt;




&lt;!-- As additional permission under GNU GPL version 3 section 7, you --&gt;


&lt;!-- may distribute non-source (e.g., minimized or compacted) forms of --&gt;


&lt;!-- that code without the copy of the GNU GPL normally required by --&gt;


&lt;!-- section 4, provided you include this license notice and a URL --&gt;


&lt;!-- through which recipients can access the Corresponding Source. --&gt;




&lt;!-- @licend  The above is the entire license notice --&gt;


&lt;!-- for the JavaScript code in this tag. --&gt;


&lt;!-- */ --&gt;


&lt;!-- &lt;\!--/*-\-&gt;&lt;![CDATA[/*&gt;&lt;\!--*/ --&gt;


&lt;!--  function CodeHighlightOn(elem, id) --&gt;


&lt;!--  { --&gt;


&lt;!--    var target = document.getElementById(id); --&gt;


&lt;!--    if(null != target) { --&gt;


&lt;!--      elem.cacheClassElem = elem.className; --&gt;


&lt;!--      elem.cacheClassTarget = target.className; --&gt;


&lt;!--      target.className = &quot;code-highlighted&quot;; --&gt;


&lt;!--      elem.className   = &quot;code-highlighted&quot;; --&gt;


&lt;!--    } --&gt;


&lt;!--  } --&gt;


&lt;!--  function CodeHighlightOff(elem, id) --&gt;


&lt;!--  { --&gt;


&lt;!--    var target = document.getElementById(id); --&gt;


&lt;!--    if(elem.cacheClassElem) --&gt;


&lt;!--      elem.className = elem.cacheClassElem; --&gt;


&lt;!--    if(elem.cacheClassTarget) --&gt;


&lt;!--      target.className = elem.cacheClassTarget; --&gt;


&lt;!--  } --&gt;


&lt;!-- /*]]&gt;*///-\-&gt; --&gt;


&lt;!-- &lt;/script&gt; --&gt;




&lt;!-- &lt;/head&gt; --&gt;


&lt;p&gt;&lt;body&gt;&lt;/p&gt;

&lt;div id=&quot;preamble&quot;&gt;

&lt;/div&gt;




&lt;div id=&quot;content&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;AWAP GRIDS &lt;/h1&gt;


&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 r-code-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1&lt;/span&gt; r-code-code&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;




&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;################################################################&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;name:r-code&lt;/span&gt;



&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;aim daily weather for any point location from online BoM weather grids&lt;/span&gt;

&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;depends on some github packages&lt;/span&gt;
&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(awaptools)
&lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;http://swish-climate-impact-assessment.github.io/tools/awaptools/awaptools-downloads.html&lt;/span&gt;
&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(swishdbtools)
&lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;http://swish-climate-impact-assessment.github.io/tools/swishdbtools/swishdbtools-downloads.html&lt;/span&gt;
&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(gisviz)
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;http://ivanhanigan.github.io/gisviz/&lt;/span&gt;

&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;and this from CRAN&lt;/span&gt;
&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;if&lt;/span&gt;(!&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(raster)) install.packages(&lt;span style=&quot;color: #2aa198;&quot;&gt;'raster'&lt;/span&gt;); &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(raster)

&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;get weather data, beware that each grid is a couple of megabytes&lt;/span&gt;
vars &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; c(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;maxave&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;minave&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;totals&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;vprph09&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;vprph15&quot;&lt;/span&gt;) &lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;,&quot;solarave&quot;) &lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;solar only available after 1990&lt;/span&gt;
&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt;(measure &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; vars)
{
  &lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;measure &amp;lt;- vars[1]&lt;/span&gt;
  get_awap_data(start = &lt;span style=&quot;color: #2aa198;&quot;&gt;'1960-01-01'&lt;/span&gt;,end = &lt;span style=&quot;color: #2aa198;&quot;&gt;'1960-01-02'&lt;/span&gt;, measure)
}

&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;get location&lt;/span&gt;
locn &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; geocode(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;daintree rainforest&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;this uses google maps API, better check this&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;lon       lat&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;1 145.4185 -16.17003&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;Treat data frame as spatial points&lt;/span&gt;
epsg &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; make_EPSG()
shp &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; SpatialPointsDataFrame(cbind(locn$lon,locn$lat),locn,
                              proj4string=CRS(epsg$prj4[epsg$code %&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt;% &lt;span style=&quot;color: #2aa198;&quot;&gt;'4283'&lt;/span&gt;]))
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;now loop over grids and extract met data&lt;/span&gt;
cfiles &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt;  dir(pattern=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;grid$&quot;&lt;/span&gt;)

&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt; (i &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; seq_len(length(cfiles))) {
  &lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;i &amp;lt;- 1 ## for stepping thru&lt;/span&gt;
  gridname &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; cfiles[[i]]
  r &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; raster(gridname)
  &lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;image(r) # plot to look at&lt;/span&gt;
  e &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; extract(r, shp, df=T)
  &lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;str(e) ## print for debugging&lt;/span&gt;
  e1 &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; shp
  e1@data$values &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; e[,2]
  e1@data$gridname &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; gridname
  &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;write to to target file&lt;/span&gt;
  write.table(e1@data,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;output.csv&quot;&lt;/span&gt;,
    col.names = i == 1, append = i&amp;gt;1 , sep = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;,&quot;&lt;/span&gt;, row.names = &lt;span style=&quot;color: #b58900;&quot;&gt;FALSE&lt;/span&gt;)
}

&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;further work is required to format the column with the gridname to get out the date and weather paramaters.&lt;/span&gt;
&lt;/pre&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;/body&gt;&lt;/p&gt;

&lt;!-- &lt;/html&gt; --&gt;

</description>
				<published>Sat Oct 26 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/extract-weather-data-from-awap-grids/</link>
			</item>
		
			<item>
				<title>document-first-ask-questions-later</title>
				<description>&lt;p&gt;This post is just a short note about something I'm thinking of calling &quot;documentation-driven development&quot;.
It is based on the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;&quot;test-driven development&quot;&lt;/a&gt;, and more recently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lamages.blogspot.in/2013/04/test-driven-analysis.html&quot;&gt;&quot;test-driven analysis&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or even &lt;a href=&quot;http://simplystatistics.org/2013/09/05/implementing-evidence-based-data-analysis-treading-a-new-path-for-reproducible-research-part-3/&quot;&gt;&quot;Evidence-based Data Analysis&quot;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;It is also a kind of a critique on the paradigm suggested by the BCCVL statement on &lt;a href=&quot;http://bccvl.org.au/blog/2013/08/20/just-in-time-metadata/&quot;&gt;&quot;Just-In-Time metadata&quot;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Anyway, it is a small thing but hopefully big things will grow.&lt;/p&gt;
</description>
				<published>Fri Oct 25 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/document-first-ask-questions-later/</link>
			</item>
		
			<item>
				<title>A Great Intro 2 Logistic Regression</title>
				<description>&lt;p&gt;This is a great example of logistic regression,  because it is pretty simple but covers good ground.  I got it from Peter Caley;s R tutorial workbook from Charles Darwin School of Environmental Research.&lt;/p&gt;

&lt;p&gt;It is also a tragic example of the impact weather can have on health.&lt;br/&gt;
The colder it is the more likely the shuttle is to explode.&lt;/p&gt;

&lt;p&gt;The problem was with the failure rate (and number of) O-rings that failed (n.fail) related to the temperature (temp).&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#Load the data
#The following R code will construct the dataset
n.fail &amp;lt;- c(2, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0)
temp &amp;lt;- c(53, 66, 68, 70, 75, 78, 57, 67, 69, 70, 75, 79, 58, 67, 70, 72, 76, 81, 63, 67, 70, 73, 76)
# there were 6 o rings for each of 23 attempts
total &amp;lt;- rep(6,23)
# probability of fail
p.fail &amp;lt;- n.fail/total
# Response = resp column bind them together  
resp &amp;lt;- cbind(n.fail, total-n.fail)

###########################################################################
# we can write text files easily once the data frame or matrix is in shape
data &amp;lt;- as.data.frame(cbind(resp,temp))
names(data) &amp;lt;- c('nfail','totalMinusNfail', 'temp')
# write.csv(data, 'learnR-logistic-data.csv', row.names=F)

###########################################################################
# and read it in again 
# data2 &amp;lt;- read.csv('learnR-logistic-data.csv')

################################################################
# name:learnR-logistic
png('images/pfail.png')
plot(temp, p.fail, pch=16, xlim=c(40,100), ylim=c(0,0.4))
title('A plot of the proportion failed by temperature')
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/pfail.png&quot; alt=&quot;pfail.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;###########################################################################
# newnode: linear
linear &amp;lt;- glm(resp ~ 1 + temp, family=binomial(link=logit))
summary(linear)
linearoutput &amp;lt;- summary(linear)
linearoutput$coeff

###########################################################################
# newnode: learnR-logistic
cf &amp;lt;- linearoutput$coeff
signif(cf[which(row.names(cf) == 'temp'),'Estimate'],2)

###########################################################################
# newnode: learnR-logistic
# write.csv(linearoutput$coeff,&quot;challengerOfails.csv&quot;)

###########################################################################
# newnode: learnR-logistic
 png('images/challengerLogistic.png')
 par(mfrow=c(2,2))
 plot(linear)
 dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/challengerLogistic.png&quot; alt=&quot;challengerLogistic.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;####################################################################
# newnode: learnR-logistic
dummy &amp;lt;- data.frame(temp=seq(20,100,1))
pred.prob &amp;lt;- predict.glm(linear, newdata=dummy, type=&quot;resp&quot;)
png('images/pfailfit.png')
plot(temp, p.fail, xlab=&quot;Launch Temperature (F)&quot;,
 ylab=&quot;Proportion Failing&quot;, pch=16, xlim=c(20,100), ylim=c(0,1.0))
lines(dummy$temp, pred.prob)
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/pfailfit.png&quot; alt=&quot;pfailfit.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;####################################################################
resp &amp;lt;- as.data.frame(resp)
resp$fail &amp;lt;- ifelse(resp$n.fail &amp;gt; 0, 1, 0)
resp$temp &amp;lt;- temp

png('images/fail.png')
with(resp, plot(temp, fail, xlab=&quot;Launch Temperature (F)&quot;,ylab=&quot;Joint damage&quot;, pch=16, xlim=c(50,80), ylim=c(0,1.0))
     )
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/fail.png&quot; alt=&quot;fail.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;chal.logit &amp;lt;- glm(fail~temp,family=binomial, data = resp)
summary(chal.logit)$coeff

png('images/pfailfit2.png')
cx &amp;lt;- c(50:80/1)
cyhat &amp;lt;- coefficients(chal.logit)[c(1)] +
coefficients(chal.logit)[c(2)]*cx
cpihat &amp;lt;- exp(cyhat)/(1+exp(cyhat))
with(resp,plot(temp,fail,xlab=&quot;Temperature&quot;,ylab=&quot;Damage&quot;,
main=&quot;Incidence of Booster Field Joint Damage vs. Temperature&quot;, xlim = c(50,80))
     )
lines(cx,cpihat)
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/pfailfit2.png&quot; alt=&quot;pfailfit2.png&quot; /&gt;&lt;/p&gt;
</description>
				<published>Fri Oct 18 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/challenger-logistic/</link>
			</item>
		
			<item>
				<title>spatially-structured-time-series-with-nmmaps</title>
				<description>&lt;p&gt;I will use the NMMAPSlite datasets for a simple example of what I
describe as &quot;Spatially Structured Timeseries&quot; as opposed to
&quot;Spatio-Temporal&quot; which I think more explicitly includes spatial
structure in the model.  &lt;a href=&quot;http://ivanhanigan.github.io/spatiotemporal-regression-models/&quot;&gt;See This Report&lt;/a&gt; for all the gory details.&lt;/p&gt;

&lt;h1&gt;R Codes&lt;/h1&gt;

&lt;!-- &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; --&gt;


&lt;!-- &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; --&gt;


&lt;!--                &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; --&gt;


&lt;!-- &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot; xml:lang=&quot;en&quot;&gt; --&gt;


&lt;p&gt;&lt;head&gt;
&lt;title&gt;Spatiotemporal Regression Modelling&lt;/title&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt;
&lt;meta name=&quot;title&quot; content=&quot;Spatiotemporal Regression Modelling&quot;/&gt;
&lt;meta name=&quot;generator&quot; content=&quot;Org-mode&quot;/&gt;
&lt;meta name=&quot;generated&quot; content=&quot;2013-10-16T15:17+1100&quot;/&gt;
&lt;meta name=&quot;author&quot; content=&quot;Ivan Hanigan&quot;/&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot;/&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;&lt;/p&gt;



&lt;script type=&quot;text/javascript&quot;&gt;
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
&lt;!--/*--&gt;&lt;![CDATA[/*&gt;&lt;!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = &quot;code-highlighted&quot;;
     elem.className   = &quot;code-highlighted&quot;;
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]&gt;*///--&gt;
&lt;/script&gt;


&lt;p&gt;&lt;/head&gt;
&lt;body&gt;&lt;/p&gt;

&lt;div id=&quot;preamble&quot;&gt;

&lt;/div&gt;




&lt;div id=&quot;content&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;Spatiotemporal Regression Modelling&lt;/h1&gt;


&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 Core Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 Core Model Plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1&lt;/span&gt; Core Model&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1&quot;&gt;




&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #5F7F5F;&quot;&gt;################################################################&lt;/span&gt;
&lt;span style=&quot;color: #5F7F5F;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7F9F7F;&quot;&gt;name:core&lt;/span&gt;
&lt;span style=&quot;color: #5F7F5F;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7F9F7F;&quot;&gt;func&lt;/span&gt;
setwd(&lt;span style=&quot;color: #CC9393;&quot;&gt;&quot;~/projects/spatiotemporal-regression-models/NMMAPS-example&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;require&lt;/span&gt;(mgcv)
&lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;require&lt;/span&gt;(splines)

&lt;span style=&quot;color: #5F7F5F;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7F9F7F;&quot;&gt;load&lt;/span&gt;
analyte &lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; read.csv(&lt;span style=&quot;color: #CC9393;&quot;&gt;&quot;analyte.csv&quot;&lt;/span&gt;)

&lt;span style=&quot;color: #5F7F5F;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7F9F7F;&quot;&gt;clean&lt;/span&gt;
analyte$yy &lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; substr(analyte$date,1,4)
numYears&lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt;length(names(table(analyte$yy)))
analyte$date &lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; as.Date(analyte$date)
analyte$time &lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; as.numeric(analyte$date)
analyte$agecat &lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; factor(analyte$agecat,
                          levels = c(&lt;span style=&quot;color: #CC9393;&quot;&gt;&quot;under65&quot;&lt;/span&gt;,
                              &lt;span style=&quot;color: #CC9393;&quot;&gt;&quot;65to74&quot;&lt;/span&gt;, &lt;span style=&quot;color: #CC9393;&quot;&gt;&quot;75p&quot;&lt;/span&gt;),
                          ordered = &lt;span style=&quot;color: #7CB8BB;&quot;&gt;TRUE&lt;/span&gt;
                          )

&lt;span style=&quot;color: #5F7F5F;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7F9F7F;&quot;&gt;do&lt;/span&gt;
fit &lt;span style=&quot;color: #BFEBBF; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; gam(cvd ~ s(tmax) + s(dptp) +
           city + agecat +
           s(time, k= 7*numYears, fx=T) +
           offset(log(pop)),
           data = analyte, family = poisson
           )

&lt;span style=&quot;color: #5F7F5F;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7F9F7F;&quot;&gt;plot of response functions&lt;/span&gt;
png(&lt;span style=&quot;color: #CC9393;&quot;&gt;&quot;images/nmmaps-eg-core.png&quot;&lt;/span&gt;, width = 1000, height = 750, res = 150)
par(mfrow=c(2,3))
plot(fit, all.terms = &lt;span style=&quot;color: #7CB8BB;&quot;&gt;TRUE&lt;/span&gt;)
dev.off()


&lt;/pre&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2&lt;/span&gt; Core Model Plots&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;&lt;img src=&quot;/images/nmmaps-eg-core.png&quot;  alt=&quot;/images/nmmaps-eg-core.png&quot; /&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
				<published>Wed Oct 16 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/spatially-structured-time-series-with-nmmaps/</link>
			</item>
		
			<item>
				<title>morpho-and-rfigshare</title>
				<description>&lt;p&gt;In this Case Study I will use Morpho to compare directly with reml.&lt;/p&gt;

&lt;h1&gt;Step one: Set up morpho&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Follow the instructions at the ASN SuperSite website and install Morpho 1.8 rather than latest version because it has technical issues that stop it from setting permissions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tern-supersites.net.au/index.php/data/repository-tutorial&quot;&gt;Configure morpho&lt;/a&gt;.  (I will follow the ASN SuperSite instructions as a future Case Study will be to use their KNB Metacat service).&lt;/li&gt;
&lt;li&gt;Do not configure to connect to the Metacat repository, will need a password to be assigned by ASN data manager.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Step 2: Look at the REML created metadata using Morpho&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Morpho offers to open existing sets for modification.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Code: get location of my example dataset&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;require(disentangle)
fpath &amp;lt;- system.file(file.path(&quot;extdata&quot;, &quot;civst_gend_sector.csv&quot;), package=&quot;disentangle&quot;)
fpath
dirname(fpath)
# [1] &quot;/home/ivan_hanigan/Rlibs/disentangle/extdata&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Morpho &gt; File &gt; import = civst_gend_sector_eml.xml&lt;/li&gt;
&lt;li&gt;(not the figshare_civst_gend_sector_eml.xml that was created when sending to figshare)&lt;/li&gt;
&lt;li&gt;Error encountered.  could not open metadata, open empty data package.  Offered to upgrade (unable to edit &gt; accepted)&lt;/li&gt;
&lt;li&gt;unable to display data, empty data package will be shown&lt;/li&gt;
&lt;li&gt;top menu &gt; Documentation &gt; Add/Edit ion

&lt;h1&gt;Step 3: Create new datasets with Morpho&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<published>Mon Oct 14 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/morpho-and-rfigshare/</link>
			</item>
		
			<item>
				<title>dc-uploader-and-ANU-DataCommons</title>
				<description>&lt;p&gt;In this post I use the tool produced at the ANU by the DataCommons team.  This requires Python3.&lt;/p&gt;

&lt;h1&gt;What does it do?&lt;/h1&gt;

&lt;p&gt;The script only creates new collection records. The functionality to edit records didn’t make it into the script as the expectation is that automated ingests will only require creation of new datasets to which files will be uploaded.&lt;/p&gt;

&lt;p&gt;Users can feel free to tweak the collection parameter file to their liking in the development environment until happy with the results.&lt;/p&gt;

&lt;h1&gt;Create the metadata.txt&lt;/h1&gt;

&lt;p&gt;You need to get the python scripts and conf file from the ANU DataCommons team.  Store these somewhere handy and move to that directory.&lt;/p&gt;

&lt;p&gt;change the anudc.conf: to test out the scripts by creating some sample records, please uncomment the “host” field in the file that points to dc7-dev2.anu.edu.au:8443 , and comment out the one that points to datacommons.anu.edu.au:8443.&lt;/p&gt;

&lt;p&gt;Also you get a different token in dev and prod servers for security reasons you cannot use the same token. Also, storing your username and password in plain text is not recommended and is to be used only for debugging purposes. Also, in my case I had to change the owner group to ‘5’ when creating records in dev. In prod, it’s 6.&lt;/p&gt;

&lt;p&gt;You can look int the &quot;Keys.txt&quot; file that contains the full list of values that can be specified in this metadata.txt file.&lt;/p&gt;

&lt;h4&gt;Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;setwd(&quot;~/tools/dcupload&quot;)
sink(&quot;metadata.txt&quot;)
cat(&quot;
# This file, referred to as a collection parameter file, consists of
# data in key=value pairs. This data is sent to the ANU Data Commons
# to create a collection, establish relations with other records,
# and/or upload files to those collections.

# The metadata section consists of metadata for use in creation (not
# for modification) of record metadata in ANU Data Commons. The
# following fields are required for the creation of a record. The file
# Keys.txt contains the full list of values that can be specified in
# this file. Based on this information below, a collection record of
# type databaset with the title &quot;Test Collection 6/05/2013&quot; will be
# created owned by Meteorology and Health group.
[metadata]
type = Collection
subType = dataset
ownerGroup = 5
# 6 on production, 5 on dev
name = Civil Status, Gender and Activity Sector
briefDesc = An example, fictional dataset for Decision Tree Models
citationCreator = Ritschard, G. (2006). Computing and using the deviance with classification trees. In Compstat 2006 - Proceedings in Computational Statistics 17th Symposium Held in Rome, Italy, 2006.
email = ivan.hanigan@anu.edu.au
anzforSubject = 1601

# The relations section allows you to specify the relation this record
# has with other records in the system.  Currently relations with NLA
# identifiers is not supported.
[relations]
isOutputOf = anudc:123

# This section contains a line of the form 'pid = anudc:123' once a
# record has been created so executing the uploader script with the
# same collection parameter file doesnt create a new record with the
# same metadata.
[pid]
&quot;)
sink()

# run the dcload
system(&quot;python3 dcuploader.py -c metadata.txt&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;h1&gt;What happened?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Looking in the metadata.txt file it now has a pid like &quot;pid = test:3527&quot;&lt;/li&gt;
&lt;li&gt;And we have created a new record in our account on the DataCommons server.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;go to the website&lt;/h1&gt;

&lt;p&gt;Now go to &lt;a href=&quot;https://dc7-dev2.anu.edu.au:8443/DataCommons/&quot;&gt;the dev site&lt;/a&gt; and you can continue editing the record manually in the browser.&lt;/p&gt;

&lt;p&gt;Or if we have ironed out the wrinkles you could go straight to the production server at &lt;a href=&quot;https://datacommons.anu.edu.au:8443/DataCommons&quot;&gt;This Link&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Uploading the data&lt;/h1&gt;

&lt;p&gt;The dataset gets sent using a Java applet in the browser while you are manually editing the record using the browser.&lt;/p&gt;

&lt;h1&gt;Notes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;After the records get created, the script tries to relate the record to other records as you’ve specified in the collection parameter file in the relations section. If you’re creating a record in dev2, you cannot relate it to a record in production because that record doesn’t exist in dev2. Remember that IDs for records in dev environments have the prefix “test:” while those in production have “anudc:”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also, when you ran the script against production the created records were linked with the record with the ID anudc:123. I have now removed those relations. You might want to change that value in your metadata.txt file so the links are established to records that created records actually can be related to. Or for testing purposes, simply delete the entire [relations] section.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<published>Sun Oct 13 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/dc-uploader-and-ANU-DataCommons/</link>
			</item>
		
			<item>
				<title>reml-and-rfigshare-part-2</title>
				<description>&lt;p&gt;In the last post I explored the functionality of reml.
This time I will try to send data to figshare.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First follow &lt;a href=&quot;https://github.com/ropensci/rfigshare&quot;&gt;These Instructions&lt;/a&gt; to get rfigshare set up.  In particular store your figshare credentials in ~/.Rprofile&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Code:reml-and-rfigshare-part-2&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# func
require(devtools)
install_github(&quot;reml&quot;, &quot;ropensci&quot;)
require(reml)
install_github(&quot;rfigshare&quot;, &quot;ropensci&quot;)
require(rfigshare)
install_github(&quot;disentangle&quot;, &quot;ivanhanigan&quot;)
require(disentangle)
# load
fpath &amp;lt;- system.file(file.path(&quot;extdata&quot;,&quot;civst_gend_sector_eml.xml&quot;), package = &quot;disentangle&quot;)
setwd(dirname(fpath))
obj &amp;lt;- eml_read(fpath)
# clean
obj
# do

## STEP 1: find one of the preset categories
# available. We can ask the API for
# a list of all the categories:
list &amp;lt;- fs_category_list()
list[grep(&quot;Survey&quot;, list)]

## STEP 2: PUBLISH TO FIGSHARE
id &amp;lt;- eml_publish(fname,
                  description=&quot;Example EML
                    A fictional dataset&quot;,
                  categories = &quot;Survey results&quot;,
                  tags = &quot;EML&quot;,
                  destination=&quot;figshare&quot;
                  )
# there are several warnings
# but go to figshare and it has sent the metadata and data OK

# make public using either the figshare web interface, the
# rfigshare package (using fs_make_public(id)) or just by adding
# the argument visibility = TRUE to the above eml_publish
fs_make_public(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;h1&gt;Now these data are on figshare&lt;/h1&gt;

&lt;p&gt;Now I have published the data they are visible and have a DOI&lt;/p&gt;

&lt;iframe src=&quot;http://wl.figshare.com/articles/820158/embed?show_title=1&quot; width=&quot;568&quot; height=&quot;157&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

</description>
				<published>Sat Oct 12 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/reml-and-rfigshare-part-2/</link>
			</item>
		
			<item>
				<title>data-documentation-case-study-reml-and-rfigshare</title>
				<description>&lt;h4&gt;Case Study: reml-and-rfigshare&lt;/h4&gt;

&lt;p&gt;First we will look at the work of the ROpenSci team and the reml
package.  In the vignette they show how to publish data to figshare
using rfigshare package.  &lt;a href=&quot;http://figshare.com/&quot;&gt;figshare&lt;/a&gt; is a site
where scientists can share datasets/figures/code. The goals are to
encourage researchers to share negative results and make reproducible
research efforts user-friendly. It also uses a tagging system for
scientific research discovery. They give you unlimited public space
and 1GB of private space.&lt;/p&gt;

&lt;p&gt;Start by getting the reml package.&lt;/p&gt;

&lt;h4&gt;Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# func
require(devtools)
install_github(&quot;reml&quot;, &quot;ropensci&quot;)
require(reml)
?eml_write
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;This is the Top-level API function for writing eml.  Help page is a bit sparse.  See &lt;a href=&quot;https://github.com/ropensci/reml&quot;&gt;This Link&lt;/a&gt; for more.  For eg &quot;for convenience, dat could simply be a data.frame and reml will launch it's metadata wizard to assist in constructing the metadata based on the data.frame provided. While this may be helpful starting out, regular users will find it faster to define the columns and units directly in the format above.&quot;&lt;/p&gt;

&lt;p&gt;Now load up the test data for classification trees I described in &lt;a href=&quot;/2013/10/test-data-for-classification-trees/&quot;&gt;This Post&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;install_github(&quot;disentangle&quot;, &quot;ivanhanigan&quot;) # for the data
                                             # described in prev post

# load
fpath &amp;lt;- system.file(file.path(&quot;extdata&quot;, &quot;civst_gend_sector.csv&quot;),
                     package = &quot;disentangle&quot;
                     )
civst_gend_sector &amp;lt;- read.csv(fpath)

# clean
str(civst_gend_sector)

# do
eml_write(civst_gend_sector,
          creator = &quot;Ivan Hanigan &amp;lt;ivanhanigan@gmail.com&amp;gt;&quot;)





# Starts up the wizard, a section is shown below.  The wizard
# prompts in the console and the user writes the answer.

# Enter description for column 'civil_status':
#  marriage status
# column civil_status appears to contain categorical data.
#  
# Categories are divorced/widowed, married, single
#  Please define each of the categories at the prompt
# define 'divorced/widowed':
# was once married
# define 'married':
# still married
# define 'single':
# never married

# TODO I don't really know what activity_sector is.  I assumed
# school because Categories are primary, secondary, tertiary.

# this created &quot;metadata.xml&quot; and &quot;metadata.csv&quot;
file.remove(c(&quot;metadata.xml&quot;,&quot;metadata.csv&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;
This was a very minimal data documentation effort.  A bit more detail would be better.  Because I would now need to re-write all that in the wizard I will take the advice of the help file that &quot;regular users will find it faster to define the columns and units directly in the format&quot;&lt;/p&gt;

&lt;h4&gt;Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ds &amp;lt;- data.set(civst_gend_sector,
               col.defs = c(&quot;Marriage status&quot;, &quot;sex&quot;, &quot;education&quot;, &quot;counts&quot;),
               unit.defs = list(c(&quot;was once married&quot;,&quot;still married&quot;,&quot;never married&quot;),
                   c(&quot;women&quot;, &quot;men&quot;),
                   c(&quot;primary school&quot;,&quot;secondary school&quot;,&quot;tertiary school&quot;),
                   c(&quot;persons&quot;))
               )
ds
# this prints the dataset and the metadata
# now run the EML function
eml_write(ds, 
          title = &quot;civst_gend_sector&quot;,  
          description = &quot;An example, fictional dataset for Decision Tree Models&quot;,
          creator = &quot;Ivan Hanigan &amp;lt;ivanhanigan@gmail.com&amp;gt;&quot;,
          file = &quot;inst/extdata/civst_gend_sector_eml.xml&quot;
          )
# this created the xml and csv with out asking anything
# but returned a
## Warning message:
## In `[&amp;lt;-.data.frame`(`*tmp*`, , value = list(civil_status = c(2L,  :
##   Setting class(x) to NULL;   result will no longer be an S4 object

# TODO investigate this?

# now we can access the local EML
obj &amp;lt;- eml_read(&quot;inst/extdata/civst_gend_sector_eml.xml&quot;)
obj 
str(dataTable(obj))
# returns an error
## Error in plyr::compact(lapply(slotNames(from), function(s) if (!isEmpty(slot(from,  (from attribute.R#300) : 
##   subscript out of bounds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;h1&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;So this looks like a useful tool.  Next steps are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;look at sending these data to figshare&lt;/li&gt;
&lt;li&gt;describe a really really REALLY simple workflow (3 lines? create metadata, eml_write, push to figshare)&lt;/li&gt;
&lt;/ul&gt;

</description>
				<published>Sat Oct 12 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/data-documentation-case-study-reml-and-rfigshare/</link>
			</item>
		
	</channel>
</rss>