<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Recology</title>
		<description>An exploration of using R for ecology, evolution, and open science.</description>
		<link>http://schamberlain.github.com</link>
		
			<item>
				<title>climatic-drought-guestpost-by-luciana-porfirio</title>
				<description>&lt;h3&gt;Guest post by Luciana Porfirio with code contributions by Francis Markham&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Recently I encountered a student doing an analysis who was doing everything in excel, and I couldn't contain my mouth and say R would be better... but it isn't a simple task. So any here are some tips.&lt;/li&gt;
&lt;li&gt;There is a table with 62 years * 12 months of rain data in mm. We calculated the cumulative distribution using ecdf: empirical cumulative distribution function. So the table looks like this: Year Jan Feb Mach (...) each cell contains the cum dist.&lt;/li&gt;
&lt;li&gt;We also got the number of months per year with less than X mm of rain. But he needs to know how many months  are between the drought months, regardless the year. So, I thought that converting the data into a ts was going to facilitate the task, but it doesn't, because now I don't' have columns and rows any longer.&lt;/li&gt;
&lt;li&gt;But I struggled to handle a ts object to do for example an ifelse.&lt;/li&gt;
&lt;li&gt;Luckily there are many many tricks about R, and with the code below we solved all his problems (and many months of work in excel).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/data/raj_rain_data.csv&quot;&gt;Get the example data here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This is how it looks like:&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;###############################################
###############################################
#read csv file with rain BoM data
dat = read.csv('raj_rain_data.csv')

fn &amp;lt;- apply(dat[,2:13], 2, ecdf) # equivalent to Excel's percentrank function, only for cols 2 to 13 but you need to apply the function to each month

#this fun does all the months at once
fn2 = data.frame(t(do.call(&quot;rbind&quot;, sapply(1:12, FUN = function(i) fn[[i]](dat[,i+1]), simplify = FALSE))))
colnames(fn2) = colnames(dat[,2:13])
fn2$year = dat$Year

#if the value is lower than 0.4, retrieves a 1, otherwise 0 fn2$drought = rowSums(ifelse(apply(fn2[,1:12], 2, FUN= function (x) x &amp;lt; 0.4)==TRUE, 1,0))

#if the value is lower than 0.1, retrieves a 1, otherwise 0 fn2$extreme = rowSums(ifelse(apply(fn2[,1:12], 2, FUN= function (x) x &amp;lt; 0.1)==TRUE, 1,0))

str(fn2)
names(fn2)

#ts didn't work - Francis suggested to melt the data.frame # Melt fn2 to tall data set fn2.tall &amp;lt;- melt(fn2, id.vars=&quot;year&quot;)

# Get the year-month into date format
fn2.tall$date &amp;lt;- with(fn2.tall,
                             as.Date(paste(&quot;1&quot;, variable, year), &quot;%d %b %Y&quot;))

# Convert dates into months since 0 BC/AD (arbitrary, but doesn't matter) #I'm not using the month.idx with Ivan's solution (remove) fn2.tall$mnth.idx &amp;lt;- sapply(fn2.tall$date, function(x){
  12*as.integer(format(x, &quot;%Y&quot;)) + (as.integer(format(x, &quot;%m&quot;)) - 1)
})

# Sort by date
fn2.tall &amp;lt;- fn2.tall[order(fn2.tall$date),]


#Ivan's solution

x&amp;lt;-fn2.tall$value&amp;lt;0.4
xx &amp;lt;- (cumsum(!x) + 1) * x
x2&amp;lt;-(seq_along(x) - match(xx, xx) + 1) * x
fn2.tall$count&amp;lt;-x2

#counts the number of cases of drought
as.data.frame(table(fn2.tall$count))
###############################################
###############################################
&lt;/code&gt;&lt;/pre&gt;
</description>
				<published>Fri Nov 01 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/11/climatic-drought-guestpost-by-luciana-porfirio/</link>
			</item>
		
			<item>
				<title>quantum-gis-visualisations</title>
				<description>&lt;ul&gt;
&lt;li&gt;This is a quick post on Quantum GIS for spatial data visualisation&lt;/li&gt;
&lt;li&gt;it is also a follow up on &lt;a href=&quot;http://swish-climate-impact-assessment.github.io/2013/06/test-gislibrary/&quot;&gt;this post about area concordance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quantum GIS is getting pretty good but is still a bit tricky to make good looking maps&lt;/li&gt;
&lt;li&gt;QGIS can use &lt;a href=&quot;http://swish-climate-impact-assessment.github.io/2013/04/quantumgis-and-postgis/&quot;&gt;remote PostGIS geodatabases on the Cloud as the backend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;R Code: use postgis to create area-concordance&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;require(devtools)
install_github(&quot;gisviz&quot;, &quot;ivanhanigan&quot;)
require(gisviz)
require(swishdbtools)
ch &amp;lt;- connect2postgres2(&quot;gislibrary&quot;)
# make a temporary tablename, to avoid clobbering
temp_table &amp;lt;- swish_temptable(&quot;gislibrary&quot;)
temp_table &amp;lt;- paste(&quot;public&quot;, temp_table$table, sep = &quot;.&quot;)
temp_table
# this is going to be public.foo11c7673416ea

sql &amp;lt;- postgis_concordance(conn = ch, source_table = &quot;abs_sla.nswsla91&quot;,
   source_zones_code = 'sla_id', target_table = &quot;abs_sla.nswsla01&quot;,
   target_zones_code = &quot;sla_code&quot;,
   into = temp_table, tolerance = 0.01,
   subset_target_table = &quot;cast(sla_code as text) like '105%'&quot;, 
   eval = F) 
cat(sql)
dbSendQuery(ch, sql)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;now connect to PostGIS using QGIS &lt;a href=&quot;http://swish-climate-impact-assessment.github.io/2013/04/quantumgis-and-postgis/&quot;&gt;as described in this tute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and add the layer to the map&lt;/li&gt;
&lt;li&gt;Style it how you like, I also added NSWSLA1991 over the top&lt;/li&gt;
&lt;li&gt;go into the &quot;new print composer&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/qgis-new-print-composer.png&quot; alt=&quot;qgis-new-print-composer.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/qgis-add-new-map.png&quot; alt=&quot;qgis-add-new-map.png&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Results&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;hit the export to image and viola&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/qgis-export-image.png&quot; alt=&quot;qgis-export-image.png&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Don't forget to clean up the database!&lt;/h3&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;dbSendQuery(ch, sprintf(&quot;drop table %s&quot;, temp_table))
&lt;/code&gt;&lt;/pre&gt;
</description>
				<published>Thu Oct 31 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/quantum-gis-visualisations/</link>
			</item>
		
			<item>
				<title>notes-on-spatial-stats-meeting-with-sarunya-sujaritpong</title>
				<description>&lt;ul&gt;
&lt;li&gt;Yesterday I met with Sarunya Sujaritpong a PhD student working with &lt;a href=&quot;http://ivanhanigan.github.io/2013/10/spatially-structured-time-series-with-nmmaps/&quot;&gt;spatially structured time-series models as described previously&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Her supervisor Keith Dear has given me a lot of good stats advice in the past and one bit I keep thinking about is that a time series model can be fit for multiple spatial areal units of the same city and residual spatial auto-correlation in the errors should not be too much of a concern&lt;/li&gt;
&lt;li&gt;The problem would be if you get strong spatial autocorrelation of the residuals this indicates that the assumption of independent errors is violated and you will have tighter confidence intervals around the coefficients of interest than is really the case, inflating the signficance estimated for the relative risk&lt;/li&gt;
&lt;li&gt;The beta coefficient itself shouldn't be affected.&lt;/li&gt;
&lt;li&gt;So long as biostatisticians like Keith are comfortable with not addressing this issue in spatially structured time-series that is great but I see people are &lt;a href=&quot;http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0043360&quot;&gt;starting to include this in their models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To date I've mostly seen it done in spatial (cross sectional) data analysis, not spatial times-series&lt;/li&gt;
&lt;li&gt;I'm preparing for the day when I might need to address this for a reviewer and would like to know what to do about it in case that happens&lt;/li&gt;
&lt;li&gt;So I asked Sarunya for a discussion about her research&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Sarunya's model is essentially like this&lt;/h3&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;fit &amp;lt;- glm(deaths ~ pollutant1 + pollutant2 + pollutant ... +
       ns(temp, df) + ns(humidity, df) +
       ns(time, df = 7*numYears) +
       SLA * ns(time, df = 2),
       data = analyte, family = poisson
       )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;SLA is Statistical Local Area (now called SA2, like a suburb)&lt;/li&gt;
&lt;li&gt;Sarunya explained that the research question was if the magnitude of the coeff on pollutant1 differed between this model and the old style of model where an entire city is used as the unit of analysis per day and exposure estimates are calculated as averages across several monitoring stations in the city&lt;/li&gt;
&lt;li&gt;turns out that this comparison is still valid EVEN IF THE STANDARD ERROR IS BIASED DUE TO RESIDUAL SPATIAL AUTOCORRELATION&lt;/li&gt;
&lt;li&gt;therefore this study avoids the issue by it's intentional design to compare betas not se&lt;/li&gt;
&lt;li&gt;Interestingly Sarunya explained that the stats theory suggests that even if the exposure precision is increased (exposure misclassification bias is decreased) the se on the beta will not be affected.&lt;/li&gt;
&lt;li&gt;this is fascinating in itself, but a separate issue for another post&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Conclusions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;So it looks like the extent a study might need to consider the issue of potential residual spatial autocorrelation depends alot on what questions are being asked and what inferences will be attempted from the results&lt;/li&gt;
&lt;li&gt;if the aim of the study is to estimate the magnitude AND CONFIDENCE INTERVALS of an exposure's relative risk (especially some novel exposure such as interstellar space dust across the suburbs) then the issue might become important to address.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;THANKS Sarunya!&lt;/p&gt;
</description>
				<published>Thu Oct 31 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/notes-on-spatial-stats-meeting-with-sarunya-sujaritpong/</link>
			</item>
		
			<item>
				<title>if-disease-incidence-varies-with-age-control-for-it</title>
				<description>&lt;ul&gt;
&lt;li&gt;today I was in a meeting where the discussion turned to maps of crude incidence rates, age-standardised rates and regression models controlling for age&lt;/li&gt;
&lt;li&gt;If disease incidence does not vary with age then there is not much point in controlling for this,&lt;/li&gt;
&lt;li&gt;apart from the work done in exploratory data analysis to ascertain whether or not this is the case&lt;/li&gt;
&lt;li&gt;I proposed that if you've done all the work on age-specific rates needed to test if incidence varies with age, then you might as well present age adjusted rates seeing as you've already done the work anyway&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;An example&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The project is highly confidential due to the nature of the data&lt;/li&gt;
&lt;li&gt;We;ll call the study location South Kingsland to protect the identity&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# get spatial data
require(swishdbtools) # github package, under
                      # swish-climate-impact-assessment

Tab1 &amp;lt;- read.csv(&quot;data/dataset.csv&quot;, sep= &quot;,&quot;, header = TRUE, stringsAsFactor = F)
Tab1 &amp;lt;- as.data.frame(table(Tab1$SLA))
nrow(Tab1)
write.csv(Tab1, &quot;data/SLA.csv&quot;, row.names = F)
load2postgres(&quot;data/SLA.csv&quot;, schema=&quot;ivan_hanigan&quot;, tablename=&quot;sla&quot;, ip = &quot;brawn.anu.edu.au&quot;,
              db = &quot;gislibrary&quot;, pguser = &quot;ivan_hanigan&quot;, printcopy = F)


ch  &amp;lt;- connect2postgres2(&quot;gislibrary&quot;)
sql_subset(ch, &quot;ivan_hanigan.sla&quot;, eval = T, limit = 10)


sql_subset(ch, &quot;abs_sla.qldsla01&quot;, select =  &quot;sla_name, st_y(st_centroid(geom))&quot;, eval = T, limit = 10)
dbSendQuery(ch,
  &quot;select sla_name, geom
  into southkingsland
  from abs_sla.qldsla01 t1
  join
  sla t2
  on t1.sla_name = t2.var1;
  alter table southkingsland add column gid serial primary key;
  &quot;)
# these are missing from spatial data
## 42                      West End                          &amp;lt;NA&amp;gt;
## 43                OVERSEAS-OTHER                          &amp;lt;NA&amp;gt;
## 44                  Yarrabah (S)                          &amp;lt;NA&amp;gt;
## 45     Rowes Bay-Belgian gardens                          &amp;lt;NA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;h3&gt;visualise with QGIS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/southkingsland.png&quot; alt=&quot;southkingsland.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# func
require(plyr)

# load
Tab2 &amp;lt;- read.csv(&quot;data/dataset.csv&quot;, sep= &quot;,&quot;, header = TRUE, stringsAsFactor = F)
names(Tab2)
# [1] &quot;SLA&quot;       &quot;agegrp&quot;    &quot;Sex&quot;       &quot;district&quot;  &quot;dm&quot;        &quot;ninf&quot;     
# [7] &quot;popSLA&quot;    &quot;Month&quot;     &quot;Year&quot;      &quot;groupyear&quot;
test_sla  &amp;lt;- names(table(Tab2$SLA)[1])
subset(Tab2, SLA == test_sla &amp;amp; Year == 2001 &amp;amp; agegrp == 1 &amp;amp; Sex == &quot;MALE&quot;)
subset(Tab2, SLA == test_sla &amp;amp; Year == 2001 &amp;amp; agegrp == 1 &amp;amp; Sex == &quot;FEMALE&quot;)

# clean
summary(Tab2)
## remove any SLA with NA populations
Tab2 &amp;lt;- Tab2[which(!is.na(Tab2$popSLA)),]     

# do
## first total cases by annualised pop
analyte  &amp;lt;- ddply(Tab2, c(&quot;SLA&quot;, &quot;Year&quot;, &quot;agegrp&quot;, &quot;Sex&quot;), summarise,
                  ninf=sum(ninf),
                  popSLA=mean(popSLA)
                  )
#str(analyte)

#subset(analyte, SLA == test_sla)
subset(analyte, SLA == test_sla &amp;amp; Year == 2001 &amp;amp; agegrp == 1)

## now annual totals for study region
analyte2  &amp;lt;- ddply(analyte, c(&quot;Year&quot;, &quot;agegrp&quot;), summarise,
                  ninf=sum(ninf),
                  popSLA=sum(popSLA)
                  )
str(analyte2)

qc &amp;lt;- subset(analyte2,  Year == 2001)
qc
sum(qc$popSLA)

## now totals
qc  &amp;lt;- ddply(analyte2, c(&quot;Year&quot;), summarise,
             ninf=sum(ninf),
             popSLA=sum(popSLA)
             )
qc
sum(qc$ninf)
mean(qc$popSLA)

## totals by age
subset(analyte2,  agegrp == 1)
analyte3  &amp;lt;- ddply(analyte2, c(&quot;agegrp&quot;), summarise,
                  ninf=sum(ninf),
                  popSLA=mean(popSLA)
                  )
analyte3
sum(analyte3$popSLA)
analyte3$asr  &amp;lt;- (analyte3$ninf / analyte3$popSLA) * 1000
analyte3

png(&quot;graphs/south-kingsland-age-specific-rates.png&quot;) 
mp &amp;lt;- barplot(analyte3$asr, names.arg = analyte3$agegrp)
box()
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;h3&gt;Plot Age Specific Rates&lt;/h3&gt;

&lt;p&gt;Great so with that bit of work we should have an idea of the variation of incidence by age&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/south-kingsland-age-specific-rates.png&quot; alt=&quot;south-kingsland-age-specific-rates.png&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;Results and Discussion&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It looks like the incidence does vary with age&lt;/li&gt;
&lt;li&gt;TODO make graphs per year (the scale of the above graph is wrong - decades in the numerator but annualised pops in the denominator)&lt;/li&gt;
&lt;li&gt;TODO make graphs by city, by sex&lt;/li&gt;
&lt;li&gt;age-standardised rates probably need different age categories, only 4 or 5?&lt;/li&gt;
&lt;li&gt;worth commenting on the liklihood that age is not important for time-series models at the city scale, unless age structure changes substantially over time (this is an analysis for the spatial pattern only)&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Clean up database!&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;dbSendQuery(ch, &quot;drop table sla&quot;)
dbSendQuery(ch, &quot;drop table southkingsland&quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
				<published>Thu Oct 31 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/if-disease-incidence-varies-with-age-control-for-it/</link>
			</item>
		
			<item>
				<title>morpho-and-reml-boilerplate-streamline-the-process-of-metadata-entry</title>
				<description>&lt;p&gt;&lt;body&gt;&lt;/p&gt;

&lt;div id=&quot;preamble&quot;&gt;

&lt;/div&gt;




&lt;div id=&quot;content&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;Disentangle Things&lt;/h1&gt;


&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 morpho-and-reml-boilerplate-streamline-the-process-of-metadata-entry&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1 Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2 Speed and Rigour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3 Analysts can often trade-off completeness of documentation for speed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;1.4 Librarians produce gold plated documentation and can take longer to produce this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;1.5 An example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;1.6 Embracing Inaccuracy and Incompleteness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7&quot;&gt;1.7 Aim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8&quot;&gt;1.8 Step 1: load a simple example dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9&quot;&gt;1.9 Step 2 create a function to deliver the minimal metadata object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10&quot;&gt;1.10 reml&lt;sub&gt;boilerplate&lt;/sub&gt;-code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-11&quot;&gt;1.11 reml&lt;sub&gt;boilerplate&lt;/sub&gt;-test-code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-12&quot;&gt;1.12 Results: This loads into Morpho with some errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13&quot;&gt;1.13 Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1&lt;/span&gt; morpho-and-reml-boilerplate-streamline-the-process-of-metadata-entry&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1&lt;/span&gt; Background&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1&quot;&gt;


&lt;ul&gt;
&lt;li&gt;The Morpho/Metacat system is great for a data repository
&lt;/li&gt;
&lt;li&gt;Morpho also claims to be suitable for Ecologists to document their data
&lt;/li&gt;
&lt;li&gt;But in my experience it leaves a little to be desired in ease of use for both purposes
&lt;/li&gt;
&lt;li&gt;Specifically the speed that documentation can be entered into Morpho is slow
&lt;/li&gt;
&lt;li&gt;This post is a first attempt to create some boilerplate code to quickly generate EML metadata using REML.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2&lt;/span&gt; Speed and Rigour&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2&quot;&gt;

&lt;p&gt;As I noted in a previous post, there are [two types of data documentation workflow](&lt;a href=&quot;http://ivanhanigan.github.io/2013/10/two-main-types-of-data-documentation-workflow/&quot;&gt;http://ivanhanigan.github.io/2013/10/two-main-types-of-data-documentation-workflow/&lt;/a&gt;).  
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GUI
&lt;/li&gt;
&lt;li&gt;Programatic
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  
I also think there are two types of users with different motivations and constraints:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1) Data Analysts
&lt;/li&gt;
&lt;li&gt;2) Data Librarians
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3&lt;/span&gt; Analysts can often trade-off completeness of documentation for speed&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3&quot;&gt;

&lt;p&gt;In my view the Analysts group of users need a tool that will very rapidly document their data and workflow steps and can live with a bit less rigour in the quality of documentation.  Obviously this is not ideal but seems an inevitable trade-off needed to enable analysts to keep up the momentum of the data processing and modelling without getting distracted by tedious (and potentially unnecessary) data documentation tasks.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.4&lt;/span&gt; Librarians produce gold plated documentation and can take longer to produce this&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4&quot;&gt;

&lt;p&gt;On the other hand the role of the Librarian group is to produce documentation to the best level possible (given time and resource constraints) the datasets and methodologies that lead to the creation of the datasets.  For that group Rigour will take precedence and there will be a trade-off in terms of the amount of time needed to produce the documentation.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5&lt;/span&gt; An example&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5&quot;&gt;

&lt;p&gt;As an example of the two different groups, an analyst working with weather data in Australia may want to specify that their variable &quot;temperature&quot; is the average of the daily maxima and minima, but might not need to specify that the observations were taken inside a Stevenson Screen, or even if they are in Celsius, Farenhiet or Kelvin.  They will be very keen to start the analysis to identify any associations between weather variables and the response variable they are investigating.   The data librarian on the other hand will be more likely to need to include this information so that the users of the temperature data do not mis-interpret it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.6&lt;/span&gt; Embracing Inaccuracy and Incompleteness&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6&quot;&gt;


&lt;ul&gt;
&lt;li&gt;I've been talking about this for a while got referred to this document by Ben Davies at the ANUSF
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[http://thedailywtf.com/Articles/Documentation-Done-Right.aspx](&lt;a href=&quot;http://thedailywtf.com/Articles/Documentation-Done-Right.aspx&quot;&gt;http://thedailywtf.com/Articles/Documentation-Done-Right.aspx&lt;/a&gt;)
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;It has this bit:
&lt;/li&gt;
&lt;/ul&gt;




&lt;pre class=&quot;src src-R&quot;&gt;  
   
Embracing Inaccuracy and Incompleteness 
    
The immediate answer to what&amp;#8217;s the right way to do documentation is
clear: produce the least amount of documentation needed to facilitate
the most understanding, and be very explicit about which documentation
is to be maintained and which is to be archived (i.e., read-only and
left to rot).
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Roughly speaking, a full EML document produced by Morpho is a bit like a whole bunch of cruft that isnt needed and gets in the way (and is more confusing)
&lt;/li&gt;
&lt;li&gt;Whereas a minimal version Im thinking of covers almost all the generic entries providing the &quot;minimum amount of stuff to make it work right&quot;.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.7&lt;/span&gt; Aim&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7&quot;&gt;


&lt;ul&gt;
&lt;li&gt;This experiment aims to speed up the creation of a minimal &quot;skeleton&quot; of metadata to a level that both the groups above can be comfortable with AS A FIRST STEP.
&lt;/li&gt;
&lt;li&gt;It is assumed that additional steps will then need to be taken to complete the documentation, but the automation of the first part of the process should shave off enough time to suit the purposes of both groups
&lt;/li&gt;
&lt;li&gt;It is an imperative that the quick-start creation of the metadata does not end up costing the documentor more time later on down the track if they need to go back to many of the elements for additional editing.
&lt;/li&gt;
&lt;/ul&gt;





&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.8&lt;/span&gt; Step 1: load a simple example dataset&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8&quot;&gt;

&lt;p&gt;I've been using a [fictitious dataset from a Statistics Methodology paper by Ritschard 2006](&lt;a href=&quot;http://ivanhanigan.github.io/2013/10/test-data-for-classification-trees/&quot;&gt;http://ivanhanigan.github.io/2013/10/test-data-for-classification-trees/&lt;/a&gt;).  It will do as a first cut but when it comes to actually test this out it would be good to have something that would take a bit longer (so that the frustrations of using Morpho become very apparent).
&lt;/p&gt;



&lt;pre class=&quot;src src-R&quot;&gt;  &lt;span style=&quot;color: #586e75;&quot;&gt;#### &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;R Code:&lt;/span&gt;
      &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;func&lt;/span&gt;
      &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(devtools)
      install_github(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;disentangle&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ivanhanigan&quot;&lt;/span&gt;)
      &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(disentangle)
      &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;load&lt;/span&gt;
      fpath &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; system.file(
          file.path(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;extdata&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;civst_gend_sector_full.csv&quot;&lt;/span&gt;),
          package = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;disentangle&quot;&lt;/span&gt;
          )
      data_set &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; read.csv(fpath)
      summary(data_set)
      &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;store it in the current project workspace&lt;/span&gt;
      write.csv(data_set, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;data/civst_gend_sector_full.csv&quot;&lt;/span&gt;, row.names = F)
      



&lt;span style=&quot;color: #586e75;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;| divorced/widowed: 33 | female:132 | primary  :116 | Min.   : 128.9 |&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;| married         :120 | male  :141 | secondary: 99 | 1st Qu.: 768.3 |&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;| single          :120 | nil        | tertiary : 58 | Median : 922.8 |&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;| nil                  | nil        | nil           | Mean   : 908.4 |&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;| nil                  | nil        | nil           | 3rd Qu.:1079.1 |&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;| nil                  | nil        | nil           | Max.   :1479.4 |&lt;/span&gt;

&lt;/pre&gt;




&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-9&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.9&lt;/span&gt; Step 2 create a function to deliver the minimal metadata object&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-9&quot;&gt;

&lt;ul&gt;
&lt;li&gt;the package REML will create a EML metadata document quite easily
&lt;/li&gt;
&lt;li&gt;I will assume that a lot of the data elements are self explanatory and take column names and factor levels as the descriptions
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-10&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.10&lt;/span&gt; reml&lt;sub&gt;boilerplate&lt;/sub&gt;-code&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10&quot;&gt;




&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;################################################################&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;name:reml_boilerplate&lt;/span&gt;
 
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;func&lt;/span&gt;
&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;if&lt;/span&gt;(!&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(reml)) {
  &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(devtools)
  install_github(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;reml&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ropensci&quot;&lt;/span&gt;)
  } 
&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(reml)

&lt;span style=&quot;color: #268bd2;&quot;&gt;reml_boilerplate&lt;/span&gt; &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;function&lt;/span&gt;(data_set, created_by = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Ivan Hanigan &amp;lt;&lt;a href=&quot;mailto:ivanhanigan&amp;#64;gmail.com&quot;&gt;ivanhanigan&amp;#64;gmail.com&lt;/a&gt;&amp;gt;&quot;&lt;/span&gt;, data_dir = getwd(), titl = &lt;span style=&quot;color: #b58900;&quot;&gt;NA&lt;/span&gt;, desc = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;)
{

  &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;essential&lt;/span&gt;
  &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;if&lt;/span&gt;(is.na(titl)) &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;stop&lt;/span&gt;(print(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;must specify title&quot;&lt;/span&gt;))
  &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;we can get the col names easily&lt;/span&gt;
  col_defs &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; names(data_set)
  &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;next create a list from the data&lt;/span&gt;
  unit_defs &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; list()
  &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt;(i &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; 1:ncol(data_set))
    {
      &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;i = 4&lt;/span&gt;
      &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;if&lt;/span&gt;(is.numeric(data_set[,i])){
        unit_defs[[i]] &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;numeric&quot;&lt;/span&gt;
      } &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;else&lt;/span&gt; {
        unit_defs[[i]] &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; names(table(data_set[,i]))          
      }
    }
  &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;unit_defs&lt;/span&gt;
  
  ds &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; data.set(data_set,
                 col.defs = col_defs,
                 unit.defs = unit_defs
                 )
  &lt;span style=&quot;color: #586e75;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;str(ds)&lt;/span&gt;

  metadata  &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; metadata(ds)
  &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;needs names&lt;/span&gt;
  &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt;(i &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; 1:ncol(data_set))
    {
      &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;i = 4&lt;/span&gt;
      &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;if&lt;/span&gt;(is.numeric(data_set[,i])){
        names(metadata[[i]][[3]]) &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;number&quot;&lt;/span&gt;
      } &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;else&lt;/span&gt; {
        names(metadata[[i]][[3]]) &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; metadata[[i]][[3]]
      }
    }
  &lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;metadata&lt;/span&gt;
  oldwd &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; getwd()
  setwd(data_dir)
  eml_write(data_set, metadata,
            title = titl,  
            description = desc,
            creator = created_by
            )
  setwd(oldwd)
  sprintf(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;your metadata has been created in the '%s' directory&quot;&lt;/span&gt;, data_dir)
  }
&lt;/pre&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-11&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-11&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.11&lt;/span&gt; reml&lt;sub&gt;boilerplate&lt;/sub&gt;-test-code&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-11&quot;&gt;




&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;################################################################&lt;/span&gt;
&lt;span style=&quot;color: #586e75;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #586e75;&quot;&gt;name:reml_boilerplate-test&lt;/span&gt;

analyte &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; read.csv(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;data/civst_gend_sector_full.csv&quot;&lt;/span&gt;)
reml_boilerplate(
  data_set = analyte,
  created_by = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Ivan Hanigan &amp;lt;&lt;a href=&quot;mailto:ivanhanigan&amp;#64;gmail.com&quot;&gt;ivanhanigan&amp;#64;gmail.com&lt;/a&gt;&amp;gt;&quot;&lt;/span&gt;,
  data_dir = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;data&quot;&lt;/span&gt;,
  titl = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;civst_gend_sector_full&quot;&lt;/span&gt;,
  desc = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;An example, fictional dataset&quot;&lt;/span&gt;
  )

dir(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;data&quot;&lt;/span&gt;)
&lt;/pre&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-12&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-12&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.12&lt;/span&gt; Results: This loads into Morpho with some errors&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-12&quot;&gt;

&lt;ul&gt;
&lt;li&gt;Notably unable to import the data file
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
&lt;img src=&quot;/images/morpho-reml-boilerplate.png&quot; alt = &quot;morpho-reml-boilerplate.png&quot;&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Also &quot;the saved document is not valid for some reason&quot;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
&lt;img src=&quot;/images/morpho-reml-boilerplate2.png&quot; alt = &quot;morpho-reml-boilerplate2.png&quot;&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-13&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-13&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.13&lt;/span&gt; Conclusions&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-13&quot;&gt;

&lt;ul&gt;
&lt;li&gt;This needs testing
&lt;/li&gt;
&lt;li&gt;A real deal breaker is if the EML is not valid 
&lt;/li&gt;
&lt;li&gt;In some cases not having the data table included will be a deal breaker (ie KNB repositories designed for downloading complete data packs
&lt;/li&gt;
&lt;li&gt;A definite failure would be that even if it is quicker to get started if it takes a long time and is difficult to fix up it might increase the risk of misunderstandings.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
				<published>Tue Oct 29 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/morpho-and-reml-streamline-the-process-of-metadata-entry/</link>
			</item>
		
			<item>
				<title>counting-number-of-consecutive-months-in-drought</title>
				<description>&lt;p&gt;I got this question today from a Drought researcher:&lt;/p&gt;

&lt;h4&gt;Question:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;There a table with 62 years * 12 months of rain data in mm. We
calculated the cumulative distribution using ecdf: empirical
cumulative distribution function. So the table looks like this:
Year Jan Feb Mach (…) each cell contains the cum dist.

We also got the number of months per year with less than X mm of
rain. But he needs to know how many months are between the
drought months, regardless the year. So, I thought that
converting the data into a ts was going to facilitate the task,
but it doesn’t, because now I don’t’ have columns and rows any
longer.

How do I handle a ts object to do for example an ifelse?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;I answered:&lt;/p&gt;

&lt;p&gt;This looks a lot like the Hutchinson Drought Index which I've coded up here&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ivanhanigan/HutchinsonDroughtIndex&quot;&gt;https://github.com/ivanhanigan/HutchinsonDroughtIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ivanhanigan/HutchinsonDroughtIndex/blob/master/src/HutchinsonDroughtIndex_tools_droughtIndex.r&quot;&gt;https://github.com/ivanhanigan/HutchinsonDroughtIndex/blob/master/src/HutchinsonDroughtIndex_tools_droughtIndex.r&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also there is a completely reproducible example with BoM rainfall data at &lt;a href=&quot;https://github.com/ivanhanigan/SuicideAndDroughtInNSW&quot;&gt;https://github.com/ivanhanigan/SuicideAndDroughtInNSW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the key bit for counting consecutive months below a threshold&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;x&amp;lt;-data$index&amp;lt;=-1
xx &amp;lt;- (cumsum(!x) + 1) * x
x2&amp;lt;-(seq_along(x) - match(xx, xx) + 1) * x
data$count&amp;lt;-x2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;
I got it from &lt;a href=&quot;https://stat.ethz.ch/pipermail/r-help/2007-June/134594.html&quot;&gt;https://stat.ethz.ch/pipermail/r-help/2007-June/134594.html&lt;/a&gt;
and looked in wonder at the structure and am amazed it works.&lt;/p&gt;

&lt;p&gt;I also really like the cumulative summing version a lot&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;data$sums&amp;lt;-as.numeric(0)
y &amp;lt;- ifelse(data$index &amp;gt;= -1, 0, data$index)
f &amp;lt;- data$index &amp;lt; -1
f &amp;lt;- (cumsum(!f) + 1) * f
z &amp;lt;- unsplit(lapply(split(y,f),cumsum),f)
data$sums &amp;lt;- z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;
Several things I'd like to change.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I like the idea of using a wide dataset and ecdf rather than my loop thru months&lt;/li&gt;
&lt;li&gt;I'd like to look into Joe Wheatley;s approach &lt;a href=&quot;]http://joewheatley.net/20th-century-droughts/&quot;&gt;http://joewheatley.net/20th-century-droughts/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I was defeated by Mike's request to make a different threshold for breaking a drought than starting a drought.  went back to a for loop&lt;/li&gt;
&lt;/ul&gt;

</description>
				<published>Tue Oct 29 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/counting-number-of-consecutive-months-in-drought/</link>
			</item>
		
			<item>
				<title>spatial-lag-and-timeseries-model-with-nmmaps</title>
				<description>&lt;ul&gt;
&lt;li&gt;Today I chatted with Phil Kokic at CSIRO Mathematics, Informatics and Statistics about the way the spatially lagged neighbours variable absorbs any residual spatial correlation in the errors&lt;/li&gt;
&lt;li&gt;We agreed that this is a pretty minimal attempt, not as good as a spatial error model but pretty easy to implement&lt;/li&gt;
&lt;li&gt;I've hacked together some very very ugly code to construct the lagged variable&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ivanhanigan.github.io/spatiotemporal-regression-models/#sec-3&quot;&gt;http://ivanhanigan.github.io/spatiotemporal-regression-models/#sec-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There may be errors, it's been a long day, but I won't have a chance to check back on this till next week so I thought I'd put it out there as is.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<published>Mon Oct 28 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/spatial-lag-and-timeseries-model-with-nmmaps/</link>
			</item>
		
			<item>
				<title>Daintree Rainforest Observatory Climate Data from AWAP-GRIDS</title>
				<description>&lt;p&gt;&lt;body&gt;&lt;/p&gt;

&lt;div id=&quot;preamble&quot;&gt;

&lt;/div&gt;




&lt;div id=&quot;content&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;AWAP GRIDS &lt;/h1&gt;


&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 Introduction and Methods&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1 Authors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2 Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3 Material and Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 R-code-for-extraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 R-code-for-comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5 Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1&lt;/span&gt; Introduction and Methods&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
This is a work in progress.  It is a stub of an article I want to put together which shows how to use several online data repositories together as a showcase of the [Scientific Workflow and Integration Software for Health (SWISH) Climate Impact Assessments](&lt;a href=&quot;https://github.com/swish-climate-impact-assessment&quot;&gt;https://github.com/swish-climate-impact-assessment&lt;/a&gt;) project.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1&lt;/span&gt; Authors&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1&quot;&gt;

&lt;ul&gt;
&lt;li&gt;Ivan Hanigan and [Markus Nolf](&lt;a href=&quot;http://www.thinkoholic.com&quot;&gt;http://www.thinkoholic.com&lt;/a&gt;)
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2&lt;/span&gt; Background&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2&quot;&gt;


&lt;ul&gt;
&lt;li&gt;Markus Nolf offers this use case of the [SWISH EWEDB](&lt;a href=&quot;http://swish-climate-impact-assessment.github.io/&quot;&gt;http://swish-climate-impact-assessment.github.io/&lt;/a&gt;)
&lt;/li&gt;
&lt;li&gt;Markus is pulling together his  Daintree Rainforest Observatory (DRO) data into a manuscript for publication, and was looking for climate data from 2012 as well as long-term. 
&lt;/li&gt;
&lt;li&gt;More specifically, the annual precipitation and mean annual temperature for both 2012 and the 30-year mean.
&lt;/li&gt;
&lt;li&gt;The Australian Bureau of Meteorology has a nice rainfall dataset available at &lt;a href=&quot;http://www.bom.gov.au/climate/data/&quot;&gt;http://www.bom.gov.au/climate/data/&lt;/a&gt; (&quot;Cape Trib Store&quot; weather station), but it seems like the temperature records are patchy.
&lt;/li&gt;
&lt;li&gt;So it is advised to use the data the DRO collects its self
&lt;/li&gt;
&lt;li&gt;You need to apply through the [ASN SuperSite data portal](&lt;a href=&quot;http://www.tern-supersites.net.au/knb/&quot;&gt;http://www.tern-supersites.net.au/knb/&lt;/a&gt;) for access to the daily data for the DRO.
&lt;/li&gt;
&lt;li&gt;Note the use of the DRO met data will need to be properly cited as it is harder to keep
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;an AWS station running in the tropics for years than it is to collect most other data. 
The citation information is provided when you make a request to access the data.
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;The long term mean used by most DRO researchers is from the BOM station as we only have a short record from the station itself.  The offset is around 1000mm.
&lt;/li&gt;
&lt;li&gt;However what we want is mean annual temperatures but the BOM website seems to focus more on mean minimum and maximum temperatures.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3&lt;/span&gt; Material and Methods&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3&quot;&gt;


&lt;ul&gt;
&lt;li id=&quot;sec-1-3-1&quot;&gt;Baseline Climate Data 2012, Far North Queensland Rainforest Supersite, Cape Tribulation Node&lt;br/&gt;

&lt;ul&gt;
&lt;li&gt;We can use the data portal too see [the data file in question](&lt;a href=&quot;http://www.tern-supersites.net.au/knb/metacat/lloyd.238.13/html&quot;&gt;http://www.tern-supersites.net.au/knb/metacat/lloyd.238.13/html&lt;/a&gt;)
&lt;/li&gt;
&lt;li&gt;Application for access is via email
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-1-3-2&quot;&gt;Extract mean annual temperatures at the BOM website&lt;br/&gt;

&lt;ul&gt;
&lt;li&gt;SWISH uses BoM data a fair bit and aims to streamline access to BoM data for extreme weather event analysis (which require long term average climatology to provide the baseline that extremes are measured against).
&lt;/li&gt;
&lt;li&gt;WRT to temperature most daily averages from BoM are calculated as average of maximum&lt;sub&gt;temperature&lt;/sub&gt;&lt;sub&gt;in&lt;/sub&gt;&lt;sub&gt;24&lt;/sub&gt;&lt;sub&gt;hours&lt;/sub&gt;&lt;sub&gt;after&lt;/sub&gt;&lt;sub&gt;9am&lt;/sub&gt;&lt;sub&gt;local&lt;/sub&gt;&lt;sub&gt;time&lt;/sub&gt;&lt;sub&gt;in&lt;/sub&gt;&lt;sub&gt;degrees&lt;/sub&gt; and minimum&lt;sub&gt;temperature&lt;/sub&gt;&lt;sub&gt;in&lt;/sub&gt;&lt;sub&gt;24&lt;/sub&gt;&lt;sub&gt;hours&lt;/sub&gt;&lt;sub&gt;before&lt;/sub&gt;&lt;sub&gt;9am&lt;/sub&gt;&lt;sub&gt;local&lt;/sub&gt;&lt;sub&gt;time&lt;/sub&gt;&lt;sub&gt;in&lt;/sub&gt;&lt;sub&gt;degree&lt;/sub&gt; (only couple of hundred AWS provide hourly data to get the proper mean of 24 obs).
&lt;/li&gt;
&lt;li&gt;The Bureau of Meteorology has generated a range of gridded meteorological datasets for Australia as a contribution to the Australian Water Availability Project (AWAP). These include daily max and min temperature which you could use to generate daily averages, then calculate your long term averages from those?  
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bom.gov.au/jsp/awap/&quot;&gt;http://www.bom.gov.au/jsp/awap/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Documentation is at &lt;a href=&quot;http://www.bom.gov.au/amm/docs/2009/jones.pdf&quot;&gt;http://www.bom.gov.au/amm/docs/2009/jones.pdf&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-1-3-3&quot;&gt;A workflow to download and process the public BoM weather grids.&lt;br/&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1&lt;/span&gt; R-depends&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;




&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;depends&lt;/span&gt;
install.packages(c(&lt;span style=&quot;color: #cc9393;&quot;&gt;'raster'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'rgdal'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'plyr'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'RODBC'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'RCurl'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'XML'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'ggmap'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'maptools'&lt;/span&gt;, &lt;span style=&quot;color: #cc9393;&quot;&gt;'spdep'&lt;/span&gt;))

&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;This workflow uses the open source R software with some of our custom written packages:
&lt;/li&gt;
&lt;/ul&gt;



&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2&lt;/span&gt; R-code-for-extraction&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;




&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;################################################################&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;name:r-code&lt;/span&gt;



&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;aim daily weather for any point location from online BoM weather grids&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;depends on some github packages&lt;/span&gt;
&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(awaptools)
&lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;http://swish-climate-impact-assessment.github.io/tools/awaptools/awaptools-downloads.html&lt;/span&gt;
&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(swishdbtools)
&lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;http://swish-climate-impact-assessment.github.io/tools/swishdbtools/swishdbtools-downloads.html&lt;/span&gt;
&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(gisviz)
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;http://ivanhanigan.github.io/gisviz/&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;and this from CRAN&lt;/span&gt;
&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;if&lt;/span&gt;(!&lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(raster)) install.packages(&lt;span style=&quot;color: #2aa198;&quot;&gt;'raster'&lt;/span&gt;); &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;require&lt;/span&gt;(raster)

&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;get weather data, beware that each grid is a couple of megabytes&lt;/span&gt;
vars &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; c(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;maxave&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;minave&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;totals&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;vprph09&quot;&lt;/span&gt;,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;vprph15&quot;&lt;/span&gt;) &lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;,&quot;solarave&quot;) &lt;/span&gt;
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;solar only available after 1990&lt;/span&gt;
&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt;(measure &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; vars)
{
  &lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;measure &amp;lt;- vars[1]&lt;/span&gt;
  get_awap_data(start = &lt;span style=&quot;color: #2aa198;&quot;&gt;'1960-01-01'&lt;/span&gt;,end = &lt;span style=&quot;color: #2aa198;&quot;&gt;'1960-01-02'&lt;/span&gt;, measure)
}

&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;get location&lt;/span&gt;
locn &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; geocode(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;daintree rainforest&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;this uses google maps API, better check this&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;lon       lat&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;1 145.4185 -16.17003&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1;&quot;&gt;## &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;Treat data frame as spatial points&lt;/span&gt;
epsg &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; make_EPSG()
shp &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; SpatialPointsDataFrame(cbind(locn$lon,locn$lat),locn,
                              proj4string=CRS(epsg$prj4[epsg$code %&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt;% &lt;span style=&quot;color: #2aa198;&quot;&gt;'4283'&lt;/span&gt;]))
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;now loop over grids and extract met data&lt;/span&gt;
cfiles &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt;  dir(pattern=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;grid$&quot;&lt;/span&gt;)

&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt; (i &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; seq_len(length(cfiles))) {
  &lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;i &amp;lt;- 1 ## for stepping thru&lt;/span&gt;
  gridname &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; cfiles[[i]]
  r &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; raster(gridname)
  &lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;image(r) # plot to look at&lt;/span&gt;
  e &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; extract(r, shp, df=T)
  &lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;str(e) ## print for debugging&lt;/span&gt;
  e1 &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; shp
  e1@data$values &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; e[,2]
  e1@data$gridname &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; gridname
  &lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;write to to target file&lt;/span&gt;
  write.table(e1@data,&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;output.csv&quot;&lt;/span&gt;,
    col.names = i == 1, append = i&amp;gt;1 , sep = &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;,&quot;&lt;/span&gt;, row.names = &lt;span style=&quot;color: #b58900;&quot;&gt;FALSE&lt;/span&gt;)
}

&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;further work is required to format the column with the gridname to get out the date and weather paramaters.&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3&lt;/span&gt; Results&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;ul&gt;
&lt;li id=&quot;sec-3-1&quot;&gt;Results&lt;br/&gt;

&lt;ul&gt;
&lt;li&gt;Markus reports:
&lt;/li&gt;
&lt;li&gt;&quot;The R-script worked great once i had set a working directory that did not include spaces. (It may have been a different problem that got solved by changing the wd, but the important thing is it's running now.)&quot;
&lt;/li&gt;
&lt;li&gt;Markus downloaded 70+ GB of gridded weather data from the BoM website to his local computer
&lt;/li&gt;
&lt;li&gt;Also note there is another set of gridded data available from the BOM, which contains pre-computed longterm mean temps, [ready to be extracted with the script](&lt;a href=&quot;http://reg.bom.gov.au/jsp/ncc/climate_averages/temperature/index.jsp?maptype=6&amp;amp;period=#maps&quot;&gt;http://reg.bom.gov.au/jsp/ncc/climate_averages/temperature/index.jsp?maptype=6&amp;amp;period=#maps&lt;/a&gt;)
&lt;/li&gt;
&lt;li&gt;&quot;Using this file, I only needed to get the 2012 temp grids for a comparison of 2012 vs. 30-year data. I'm going to run the extraction of 1961-1990 data, just to be sure.&quot;
&lt;/li&gt;
&lt;li&gt;&quot;When we finished analysis of the long-term temperature from daily means found:
&lt;/li&gt;
&lt;li&gt;While the official, pre-computed long-term mean (i.e. 30-year grid file, analysed with your script) was 22.29 °C for the DRO coordinates (145.4494, -16.1041), the new value from daily means (i.e. daily minave and maxave averaged) is 24.91 °C.
&lt;/li&gt;
&lt;li&gt;We're not sure what causes this discrepancy, but thought we'd note that there is one.
&lt;/li&gt;
&lt;li&gt;For the manuscript, we ended up using the means obtained via BOM's method* to compare 1961-1990 values to 2012, both computed with the above script.
&lt;/li&gt;
&lt;li&gt;(* average of daily min/max temperature for each year, then averaged across the entire 30 year period)
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-3-2&quot;&gt;Dataset discrepancy&lt;br/&gt;

&lt;ul&gt;
&lt;li&gt;Following up on the interesting a difference between the two BoM datasets. 
&lt;/li&gt;
&lt;li&gt;One thing that might cause this might be if you are calculating the average of the annual averages ie sum(annavs)/30 or the average of all the daily averages as sum(dailyavs)/(30 * 365 or 366)?  the variance will differ by these methods.
&lt;/li&gt;
&lt;li&gt;looks like the 30 year dataset is the former:
&lt;/li&gt;
&lt;li&gt;&quot;Average annual temperatures (maximum, minimum or mean) are calculated by adding daily temperature values each year, dividing by the number of days in that year to get an average for that particular year. The average values for each year in a specified period (1961 to 1990) are added together and the final value is calculated by dividing by the number of years in the period (30 years in this case).&quot;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[metadata](&lt;a href=&quot;http://reg.bom.gov.au/jsp/ncc/climate_averages/temperature/index.jsp?maptype=6&amp;amp;period=#maps&quot;&gt;http://reg.bom.gov.au/jsp/ncc/climate_averages/temperature/index.jsp?maptype=6&amp;amp;period=#maps&lt;/a&gt;)
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Markus followed the BOM calculation method, and just compared it with two other approaches.
&lt;/li&gt;
&lt;li&gt;average of all 21914 values
&lt;/li&gt;
&lt;li&gt;average of yearly sum(min and max values per year)/(ndays*2)
&lt;/li&gt;
&lt;li&gt;average of yearly sum(daily average)/ndays)
&lt;/li&gt;
&lt;li&gt;where ndays = number of days per year.
&lt;/li&gt;
&lt;li&gt;Differences between these methods show only in the 6th decimal place, far from 2.62 degrees.
&lt;/li&gt;
&lt;/ul&gt;



&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4&lt;/span&gt; R-code-for-comparison&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4&quot;&gt;




&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;################################################################&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;This is Markus' comparison script &lt;/span&gt;
&lt;span style=&quot;color: #93a1a1;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;also see the formatted table csv, as well as the SWISH script's raw output csv&lt;/span&gt;

setwd(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;E:\\markus\\ph.d\\aus-daintree\\data-analysis\\climate&quot;&lt;/span&gt;)
climate &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; read.csv(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;minmaxave-30year-daily.csv&quot;&lt;/span&gt;, sep=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;,&quot;&lt;/span&gt;, dec=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;.&quot;&lt;/span&gt;)

climate$year &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; substr(climate$file,1,4)
climate$dailymean &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; (climate$maxave+climate$minave)/2
head(climate)


&lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;total average across all days and values&lt;/span&gt;
annmean &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; mean(c(climate$maxave,climate$minave))
annmean


&lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;daily means averaged by year, then total average&lt;/span&gt;
annmean1 &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; c(1,2)
&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt;(i &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; 1:30) {
        annmean1[i] &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; mean(climate[climate$year==(i+1960),]$dailymean)
        &lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;print(annmean1[i])&lt;/span&gt;
}
annmean1
mean(annmean1)


&lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;mean of all values per year, then total average&lt;/span&gt;
annmean2 &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; c(1,2)
&lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;for&lt;/span&gt;(i &lt;span style=&quot;color: #859900; font-weight: bold;&quot;&gt;in&lt;/span&gt; 1:30) {
        tmpdata &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; climate[climate$year==(i+1960),]
        annmean2[i] &lt;span style=&quot;color: #268bd2; font-weight: bold;&quot;&gt;&amp;lt;-&lt;/span&gt; (sum(tmpdata$maxave) + sum(tmpdata$minave))/(length(tmpdata$maxave)+length(tmpdata$minave))
        &lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;print(annmean2[i])&lt;/span&gt;
}
annmean2; mean(annmean2)


&lt;span style=&quot;color: #93a1a1;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1;&quot;&gt;differences&lt;/span&gt;
annmean - mean(annmean1)
annmean - mean(annmean2)
mean(annmean1) - mean(annmean2)


&lt;/pre&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;5&lt;/span&gt; Discussion&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5&quot;&gt;


&lt;ul&gt;
&lt;li&gt;Principal findings: Very convenient automated extraction of location-based time series data for the precise period that is requested.
&lt;/li&gt;
&lt;li&gt;Weaknesses (whole method, not your script): very long download time for daily grids (~11.000 grids = huge dataset, took several days in my case). Yearly grids would be beneficial (and I believe most others are also looking mainly for data on a yearly (or larger) scale).
&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
&lt;li id=&quot;sec-5-1&quot;&gt;Conclusion&lt;br/&gt;

&lt;ul&gt;
&lt;li&gt;Take home message: Seems like a perfect case of &quot;double-check the data using one and the same method&quot;.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
				<published>Sat Oct 26 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/extract-weather-data-from-awap-grids/</link>
			</item>
		
			<item>
				<title>document-first-ask-questions-later</title>
				<description>&lt;p&gt;This post is just a short note about something I'm thinking of calling &quot;documentation-driven development&quot;.
It is based on the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;&quot;test-driven development&quot;&lt;/a&gt;, and more recently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lamages.blogspot.in/2013/04/test-driven-analysis.html&quot;&gt;&quot;test-driven analysis&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or even &lt;a href=&quot;http://simplystatistics.org/2013/09/05/implementing-evidence-based-data-analysis-treading-a-new-path-for-reproducible-research-part-3/&quot;&gt;&quot;Evidence-based Data Analysis&quot;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;It is also a kind of a critique on the paradigm suggested by the BCCVL statement on &lt;a href=&quot;http://bccvl.org.au/blog/2013/08/20/just-in-time-metadata/&quot;&gt;&quot;Just-In-Time metadata&quot;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Anyway, it is a small thing but hopefully big things will grow.&lt;/p&gt;
</description>
				<published>Fri Oct 25 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/document-first-ask-questions-later/</link>
			</item>
		
			<item>
				<title>A Great Intro 2 Logistic Regression</title>
				<description>&lt;p&gt;This is a great example of logistic regression,  because it is pretty simple but covers good ground.  I got it from Peter Caley;s R tutorial workbook from Charles Darwin School of Environmental Research.&lt;/p&gt;

&lt;p&gt;It is also a tragic example of the impact weather can have on health.&lt;br/&gt;
The colder it is the more likely the shuttle is to explode.&lt;/p&gt;

&lt;p&gt;The problem was with the failure rate (and number of) O-rings that failed (n.fail) related to the temperature (temp).&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#Load the data
#The following R code will construct the dataset
n.fail &amp;lt;- c(2, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0)
temp &amp;lt;- c(53, 66, 68, 70, 75, 78, 57, 67, 69, 70, 75, 79, 58, 67, 70, 72, 76, 81, 63, 67, 70, 73, 76)
# there were 6 o rings for each of 23 attempts
total &amp;lt;- rep(6,23)
# probability of fail
p.fail &amp;lt;- n.fail/total
# Response = resp column bind them together  
resp &amp;lt;- cbind(n.fail, total-n.fail)

###########################################################################
# we can write text files easily once the data frame or matrix is in shape
data &amp;lt;- as.data.frame(cbind(resp,temp))
names(data) &amp;lt;- c('nfail','totalMinusNfail', 'temp')
# write.csv(data, 'learnR-logistic-data.csv', row.names=F)

###########################################################################
# and read it in again 
# data2 &amp;lt;- read.csv('learnR-logistic-data.csv')

################################################################
# name:learnR-logistic
png('images/pfail.png')
plot(temp, p.fail, pch=16, xlim=c(40,100), ylim=c(0,0.4))
title('A plot of the proportion failed by temperature')
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/pfail.png&quot; alt=&quot;pfail.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;###########################################################################
# newnode: linear
linear &amp;lt;- glm(resp ~ 1 + temp, family=binomial(link=logit))
summary(linear)
linearoutput &amp;lt;- summary(linear)
linearoutput$coeff

###########################################################################
# newnode: learnR-logistic
cf &amp;lt;- linearoutput$coeff
signif(cf[which(row.names(cf) == 'temp'),'Estimate'],2)

###########################################################################
# newnode: learnR-logistic
# write.csv(linearoutput$coeff,&quot;challengerOfails.csv&quot;)

###########################################################################
# newnode: learnR-logistic
 png('images/challengerLogistic.png')
 par(mfrow=c(2,2))
 plot(linear)
 dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/challengerLogistic.png&quot; alt=&quot;challengerLogistic.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;####################################################################
# newnode: learnR-logistic
dummy &amp;lt;- data.frame(temp=seq(20,100,1))
pred.prob &amp;lt;- predict.glm(linear, newdata=dummy, type=&quot;resp&quot;)
png('images/pfailfit.png')
plot(temp, p.fail, xlab=&quot;Launch Temperature (F)&quot;,
 ylab=&quot;Proportion Failing&quot;, pch=16, xlim=c(20,100), ylim=c(0,1.0))
lines(dummy$temp, pred.prob)
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/pfailfit.png&quot; alt=&quot;pfailfit.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;####################################################################
resp &amp;lt;- as.data.frame(resp)
resp$fail &amp;lt;- ifelse(resp$n.fail &amp;gt; 0, 1, 0)
resp$temp &amp;lt;- temp

png('images/fail.png')
with(resp, plot(temp, fail, xlab=&quot;Launch Temperature (F)&quot;,ylab=&quot;Joint damage&quot;, pch=16, xlim=c(50,80), ylim=c(0,1.0))
     )
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/fail.png&quot; alt=&quot;fail.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;R Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;chal.logit &amp;lt;- glm(fail~temp,family=binomial, data = resp)
summary(chal.logit)$coeff

png('images/pfailfit2.png')
cx &amp;lt;- c(50:80/1)
cyhat &amp;lt;- coefficients(chal.logit)[c(1)] +
coefficients(chal.logit)[c(2)]*cx
cpihat &amp;lt;- exp(cyhat)/(1+exp(cyhat))
with(resp,plot(temp,fail,xlab=&quot;Temperature&quot;,ylab=&quot;Damage&quot;,
main=&quot;Incidence of Booster Field Joint Damage vs. Temperature&quot;, xlim = c(50,80))
     )
lines(cx,cpihat)
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;/images/pfailfit2.png&quot; alt=&quot;pfailfit2.png&quot; /&gt;&lt;/p&gt;
</description>
				<published>Fri Oct 18 00:00:00 +1100 2013</published>
				<link>http://schamberlain.github.com/2013/10/challenger-logistic/</link>
			</item>
		
	</channel>
</rss>