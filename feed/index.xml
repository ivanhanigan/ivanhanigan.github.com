<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>DisentangleThings</title>
 <link href="http://ivanhanigan.github.com/feed/" rel="self"/>
 <link href="http://ivanhanigan.github.com/"/>
 <updated>2015-10-08T16:08:11+11:00</updated>
 <id>http://ivanhanigan.github.com/</id>
 <author>
   <name>ivanhanigan</name>
   <email>ivan.hanigan@gmail.com</email>
 </author>

 
 <entry>
   <title>A quick review of a quick guide to organizing computational biology projects</title>
   <link href="http://ivanhanigan.github.com/2015/10/a-quick-review-of-a-quick-guide-to-organizing-computational-biology-projects/"/>
   <updated>2015-10-07T00:00:00+11:00</updated>
   <id>http://ivanhanigan.github.com/2015/10/a-quick-review-of-a-quick-guide-to-organizing-computational-biology-projects</id>
   <content type="html">&lt;p&gt;The organisation of material is a particularly vexatious topic.  For a data analysis project it is very important that the set of folders and files is logical and intuitive, as well as being well documented. The oft-heard exhortation by computer scientists to their users to 'Read The F-ing Manual' (RTFM) is perennial and rooted in the fundamental difficulty of readers to have the time required to read and digest the detailed information there-in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this post I review a paper that I was referred to by recent activity on the
Mozillascience studyGroupLesson 'Open Science Utility Belt':
&lt;a href=&quot;https://github.com/mozillascience/studyGroupLessons/issues/7&quot;&gt;https://github.com/mozillascience/studyGroupLessons/issues/7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;That group also holds a journal club &lt;a href=&quot;https://github.com/minisciencegirl/studyGroup/issues/20#issuecomment-134750483&quot;&gt;https://github.com/minisciencegirl/studyGroup/issues/20#issuecomment-134750483&lt;/a&gt; and they reviewed this paper:&lt;/li&gt;
&lt;li&gt;Noble, W. S. (2009). A quick guide to organizing computational biology projects. PLoS Computational Biology, 5(7), 1â€“5. &lt;a href=&quot;http://dx.doi.org/10.1371/journal.pcbi.1000424&quot;&gt;http://dx.doi.org/10.1371/journal.pcbi.1000424&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I missed out so I thought I'd put my notes up here for reference:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;core guiding principle is simple: Someone unfamiliar with your project should be able to look at your computer files and understand in detail what you did and why&lt;/li&gt;
&lt;li&gt;your future self may find it difficult to understand your current work.&lt;/li&gt;
&lt;li&gt;Noble's law: 'Everything you do, you will probably have to do over again'&lt;/li&gt;
&lt;li&gt;store all of the files relevant to one project in common root directory&lt;/li&gt;
&lt;li&gt;The exception to this rule is data/code that are used in multiple projects, they are standalone projects&lt;/li&gt;
&lt;li&gt;Within a given project, use a top-level organization that is logical first, then chronological  at the next level, and then logical organization next&lt;/li&gt;
&lt;li&gt;Core folders are &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;, &lt;code&gt;doc&lt;/code&gt; (versus Berndt Weiss' &lt;code&gt;dat&lt;/code&gt;, &lt;code&gt;ana&lt;/code&gt;, &lt;code&gt;doc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Chronological order?  'tempting to apply a similar, logical organization... this approach is risky, because the logical structure of your final set of experiments may look drastically different from the form you initially designed. This is particularly true under the results directory, where you may not even know in advance what kinds of experiments you will need to perform'&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Recommended folder and file structures &lt;a href=&quot;http://dx.doi.org/10.1371/journal.pcbi.1000424.g001&quot;&gt;http://dx.doi.org/10.1371/journal.pcbi.1000424.g001&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;/projectname (eg msms)/
    /doc/
        /ms-analysis.html 
        /paper/
            /msms.tex
            /msms.pdf
    /data/
        /YYYY-MM-DD/
            /yeast/
                /README
                /yeast.sqt
            /worm/
                /README
                /worm.sqt
    /src/
        /ms-analysis.c
    /bin/
        /parse-sqt.py
    /results/
        /notebook.html 
        /YYYY-MM-DD-1/
            /runall
            /split1/
            /split2/
        /YYYY-MM-DD-2/
            /runall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;ol&gt;
&lt;li&gt;Use a driver script to automate creation of a directory structure&lt;/li&gt;
&lt;li&gt;maintain a chronologically organized lab notebook (I have been calling this a work 'log' sensu Scott Long's 2008 'Workflow book')&lt;/li&gt;
&lt;li&gt;create either a README file, or a command line driver script (he calls this &lt;code&gt;runall&lt;/code&gt;, but see also &lt;code&gt;main.R&lt;/code&gt; sensu the Reichian LCFD model)&lt;/li&gt;
&lt;li&gt;you should end up with a file that is parallel to the lab notebook entry. The lab notebook contains a prose description of the exper- iment, whereas the driver script contains all the gory details&lt;/li&gt;
&lt;li&gt;Version Control.  'Nuff said! But how to build capacity with Github when all my colleagues seem so confused by it?&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 
</feed>
