<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>DisentangleThings</title>
 <link href="http://ivanhanigan.github.com/feed/" rel="self"/>
 <link href="http://ivanhanigan.github.com/"/>
 <updated>2015-10-03T13:51:57+10:00</updated>
 <id>http://ivanhanigan.github.com/</id>
 <author>
   <name>ivanhanigan</name>
   <email>ivan.hanigan@gmail.com</email>
 </author>

 
 <entry>
   <title>Complexity of Graphs Obfuscates, but Visual Grouping Helps Disentangle Things</title>
   <link href="http://ivanhanigan.github.com/2015/10/complexity-of-graphs-obfuscates-but-visual-grouping-helps-disentangle-things/"/>
   <updated>2015-10-03T00:00:00+10:00</updated>
   <id>http://ivanhanigan.github.com/2015/10/complexity-of-graphs-obfuscates-but-visual-grouping-helps-disentangle-things</id>
   <content type="html">&lt;p&gt;Using diagrams has long been a technique used in science to describe the relationships (edges) between things (nodes).  Mathematics and geometry tools have been applied to ameliorate the problem of laying out the diagram for the most efficient use of space.  It is desirable to minimise the gaps between the nodes and also to ensure that lines do not overlap too much.  This is because the complexity of graphs obfuscates the details that we are trying to show. Visual grouping helps to disentangle the relationships.&lt;/p&gt;

&lt;p&gt;As an example, the relationship between drought and suicide is a complex system
where the effects are indirect. The focus is on a chain
of intermediary causal factors. These questions are usually explored
in the context of many other factors that describe human biological
variables and the socio-economic milieu.&lt;/p&gt;

&lt;p&gt;In this post I utilise the R package &lt;code&gt;DiagrammeR&lt;/code&gt; to construct a causal directed acyclic graph (DAG) of the putative effects of a set of selected causal factors from both natural and social capital theories.&lt;/p&gt;

&lt;p&gt;The following code produces graph
&lt;img src=&quot;/images/suicide-drought.png&quot; alt=&quot;/images/suicide-drought.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or this interactive version &lt;a href=&quot;/viewhtml21f36d8c5d7d/index.html&quot;&gt;/viewhtml21f36d8c5d7d/index.html&lt;/a&gt;&lt;/p&gt;

&lt;iframe style=&quot;border: none;&quot; height=&quot;400&quot; width=&quot;600&quot; src=&quot;/viewhtml21f36d8c5d7d/index.html&quot;&gt;&lt;/iframe&gt;


&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(DiagrammeR)
#### First create the outcome
nodes_outcome &amp;lt;- create_nodes(nodes = c('suicide','depression','anxiety'),
                        label = TRUE,
                        colour = &quot;black&quot;)

edges_outcome &amp;lt;- create_edges(from = c('depression','anxiety'),
                        to =   c(&quot;suicide&quot;, &quot;suicide&quot;)
                        )

graph_outcome &amp;lt;- create_graph(nodes_df = nodes_outcome,
                       edges_df = edges_outcome)
# just test this out
## render_graph(graph_outcome)

#### now the social capital factors  
nodes_social &amp;lt;- 
  create_nodes(nodes =  c(&quot;stress&quot;, &quot;decreased community support&quot;, &quot;migration&quot;),
               label = TRUE,
               color = &quot;blue&quot;)

edges_social &amp;lt;- create_edges(from =  c(&quot;stress&quot;, &quot;stress&quot;, &quot;decreased community support&quot;,
                          &quot;migration&quot;),
                        to =   c(&quot;anxiety&quot;, &quot;depression&quot;, &quot;anxiety&quot;,
                          &quot;decreased community support&quot;)
                        )
graph_social &amp;lt;- create_graph(nodes_df = nodes_social,
                       edges_df = edges_social)
# render_graph(graph_social)

#### now the financial capital factors
nodes_financial &amp;lt;- 
  create_nodes(nodes = c(&quot;employment&quot;, &quot;debt&quot;),
               label = TRUE,
               color = &quot;green&quot;)

edges_financial &amp;lt;- create_edges(from = c(&quot;employment&quot;, &quot;employment&quot;, &quot;debt&quot;),
                        to =   c(&quot;stress&quot;, &quot;debt&quot;, &quot;stress&quot;)
                        )
graph_financial &amp;lt;- create_graph(nodes_df = nodes_financial,
                       edges_df = edges_financial)
# render_graph(graph_financial)


#### now the natural capital factors
nodes_natural &amp;lt;- 
  create_nodes(nodes = c(&quot;drought&quot;, &quot;declined agricultural productivity&quot;, &quot;decreased food security&quot;),
               label = TRUE,
               color = &quot;red&quot;)

edges_natural &amp;lt;- create_edges(from = c(&quot;drought&quot;, &quot;drought&quot;, &quot;declined agricultural productivity&quot;,
                          &quot;declined agricultural productivity&quot;, &quot;declined agricultural productivity&quot;,
                          &quot;decreased food security&quot;,
                          &quot;drought&quot;),
                        to =   c(&quot;declined agricultural productivity&quot;, &quot;decreased food security&quot;, &quot;decreased food security&quot;,
                          &quot;anxiety&quot;, &quot;employment&quot;,
                          &quot;anxiety&quot;,
                          &quot;migration&quot;)
                        )
graph_natural &amp;lt;- create_graph(nodes_df = nodes_natural,
                       edges_df = edges_natural)
## render_graph(graph_natural)

# use create_graph on separate nodes and edges data frames, one for each cluster
# then access the dot codes for each
gr0 &amp;lt;- graph_outcome$dot_code
gr1 &amp;lt;- graph_social$dot_code
gr2 &amp;lt;- graph_financial$dot_code
gr3 &amp;lt;- graph_natural$dot_code
# then replace the graph with subgraph
gr0 &amp;lt;- gsub(&quot;digraph&quot;, &quot;subgraph cluster0&quot;, gr0)
gr1 &amp;lt;- gsub(&quot;digraph&quot;, &quot;subgraph cluster1&quot;, gr1)
gr2 &amp;lt;- gsub(&quot;digraph&quot;, &quot;subgraph cluster2&quot;, gr2)
gr3 &amp;lt;- gsub(&quot;digraph&quot;, &quot;subgraph cluster3&quot;, gr3)
# and then combine the subgraphs into one graph
gr_out &amp;lt;- sprintf(&quot;digraph{\n%s\n\n %s\n%s\n%s\n}&quot;, gr0, gr1, gr2, gr3)
cat(gr_out)
grViz(gr_out)
# If graphviz is installed and on linux call it with a shell command
sink(&quot;suicide-drought.dot&quot;)
cat(gsub(&quot;'&quot;,'&quot;', gr_out))
sink()
system(&quot;dot -Tpng suicide-drought.dot -o suicide-drought.png&quot;)
# Interactive
nodes &amp;lt;- combine_nodes(nodes_outcome, nodes_social, nodes_natural, nodes_financial)
edges &amp;lt;- combine_edges(edges_outcome, edges_social, edges_natural, edges_financial)

# Render graph
graph &amp;lt;- create_graph(nodes_df = nodes,
                      edges_df = edges)

render_graph(graph, output = &quot;visNetwork&quot;)    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

</content>
 </entry>
 
 
</feed>
